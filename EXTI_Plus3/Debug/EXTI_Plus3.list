
EXTI_Plus3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001844  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080019f0  080019f0  000119f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a00  08001a00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001a00  08001a00  00011a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001a08  08001a08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a08  08001a08  00011a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a0c  08001a0c  00011a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000034  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000040  20000040  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003df1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e96  00000000  00000000  00023e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000440  00000000  00000000  00024cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003b8  00000000  00000000  00025108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021543  00000000  00000000  000254c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004b06  00000000  00000000  00046a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caff9  00000000  00000000  0004b509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00116502  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f60  00000000  00000000  00116554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080019d8 	.word	0x080019d8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080019d8 	.word	0x080019d8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
   uint16_t led = 0x01;
 80004f6:	2301      	movs	r3, #1
 80004f8:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 fa97 	bl	8000a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f875 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8d3 	bl	80006ac <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  LED_OnOff(LED_ALL, 500);
 8000506:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800050a:	20ff      	movs	r0, #255	; 0xff
 800050c:	f000 f95a 	bl	80007c4 <LED_OnOff>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
     if(flag_SW1 == 1){
 8000510:	4b31      	ldr	r3, [pc, #196]	; (80005d8 <main+0xe8>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d114      	bne.n	8000542 <main+0x52>
    	 led<<=1;
 8000518:	88fb      	ldrh	r3, [r7, #6]
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	80fb      	strh	r3, [r7, #6]
        if(led>0x80) led=0x01;
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	2b80      	cmp	r3, #128	; 0x80
 8000522:	d901      	bls.n	8000528 <main+0x38>
 8000524:	2301      	movs	r3, #1
 8000526:	80fb      	strh	r3, [r7, #6]
        LED_OnOff(led, 300-10*speed);
 8000528:	88fa      	ldrh	r2, [r7, #6]
 800052a:	4b2c      	ldr	r3, [pc, #176]	; (80005dc <main+0xec>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f06f 0109 	mvn.w	r1, #9
 8000532:	fb01 f303 	mul.w	r3, r1, r3
 8000536:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800053a:	4619      	mov	r1, r3
 800053c:	4610      	mov	r0, r2
 800053e:	f000 f941 	bl	80007c4 <LED_OnOff>
     }
     if(flag_SW2 == 1){
 8000542:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <main+0xf0>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d113      	bne.n	8000572 <main+0x82>
        led <<= 1;
 800054a:	88fb      	ldrh	r3, [r7, #6]
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	80fb      	strh	r3, [r7, #6]
        if(led>0x80) led=0x01;
 8000550:	88fb      	ldrh	r3, [r7, #6]
 8000552:	2b80      	cmp	r3, #128	; 0x80
 8000554:	d901      	bls.n	800055a <main+0x6a>
 8000556:	2301      	movs	r3, #1
 8000558:	80fb      	strh	r3, [r7, #6]
        LED_OnOff(led, 300+10*speed);
 800055a:	88f8      	ldrh	r0, [r7, #6]
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <main+0xec>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4613      	mov	r3, r2
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	4413      	add	r3, r2
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800056c:	4619      	mov	r1, r3
 800056e:	f000 f929 	bl	80007c4 <LED_OnOff>
     }
     if(flag_SW3 == 1){
 8000572:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <main+0xf4>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d114      	bne.n	80005a4 <main+0xb4>
        led >>= 1;
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	085b      	lsrs	r3, r3, #1
 800057e:	80fb      	strh	r3, [r7, #6]
        if(led<0x01) led=0x80;
 8000580:	88fb      	ldrh	r3, [r7, #6]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d101      	bne.n	800058a <main+0x9a>
 8000586:	2380      	movs	r3, #128	; 0x80
 8000588:	80fb      	strh	r3, [r7, #6]
        LED_OnOff(led, 300-10*speed);
 800058a:	88fa      	ldrh	r2, [r7, #6]
 800058c:	4b13      	ldr	r3, [pc, #76]	; (80005dc <main+0xec>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f06f 0109 	mvn.w	r1, #9
 8000594:	fb01 f303 	mul.w	r3, r1, r3
 8000598:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800059c:	4619      	mov	r1, r3
 800059e:	4610      	mov	r0, r2
 80005a0:	f000 f910 	bl	80007c4 <LED_OnOff>
     }
     if(flag_SW4 == 1){
 80005a4:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <main+0xf8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d1b1      	bne.n	8000510 <main+0x20>
        led >>= 1;
 80005ac:	88fb      	ldrh	r3, [r7, #6]
 80005ae:	085b      	lsrs	r3, r3, #1
 80005b0:	80fb      	strh	r3, [r7, #6]
        if(led<0x01) led=0x80;
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d101      	bne.n	80005bc <main+0xcc>
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	80fb      	strh	r3, [r7, #6]
        LED_OnOff(led, 300+10*speed);
 80005bc:	88f8      	ldrh	r0, [r7, #6]
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <main+0xec>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	4613      	mov	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	4413      	add	r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80005ce:	4619      	mov	r1, r3
 80005d0:	f000 f8f8 	bl	80007c4 <LED_OnOff>
     if(flag_SW1 == 1){
 80005d4:	e79c      	b.n	8000510 <main+0x20>
 80005d6:	bf00      	nop
 80005d8:	20000028 	.word	0x20000028
 80005dc:	20000038 	.word	0x20000038
 80005e0:	2000002c 	.word	0x2000002c
 80005e4:	20000030 	.word	0x20000030
 80005e8:	20000034 	.word	0x20000034

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 f9e4 	bl	80019c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <SystemClock_Config+0xb8>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a22      	ldr	r2, [pc, #136]	; (80006a4 <SystemClock_Config+0xb8>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <SystemClock_Config+0xb8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <SystemClock_Config+0xbc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000638:	4a1b      	ldr	r2, [pc, #108]	; (80006a8 <SystemClock_Config+0xbc>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <SystemClock_Config+0xbc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000658:	2300      	movs	r3, #0
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fd69 	bl	8001138 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800066c:	f000 f92e 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f000 ffcc 	bl	8001628 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000696:	f000 f919 	bl	80008cc <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	; 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	4b3c      	ldr	r3, [pc, #240]	; (80007b8 <MX_GPIO_Init+0x10c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a3b      	ldr	r2, [pc, #236]	; (80007b8 <MX_GPIO_Init+0x10c>)
 80006cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b39      	ldr	r3, [pc, #228]	; (80007b8 <MX_GPIO_Init+0x10c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <MX_GPIO_Init+0x10c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a34      	ldr	r2, [pc, #208]	; (80007b8 <MX_GPIO_Init+0x10c>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b32      	ldr	r3, [pc, #200]	; (80007b8 <MX_GPIO_Init+0x10c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <MX_GPIO_Init+0x10c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a2d      	ldr	r2, [pc, #180]	; (80007b8 <MX_GPIO_Init+0x10c>)
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <MX_GPIO_Init+0x10c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0308 	and.w	r3, r3, #8
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000716:	2200      	movs	r2, #0
 8000718:	21ff      	movs	r1, #255	; 0xff
 800071a:	4828      	ldr	r0, [pc, #160]	; (80007bc <MX_GPIO_Init+0x110>)
 800071c:	f000 fcda 	bl	80010d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000720:	2303      	movs	r3, #3
 8000722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000724:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000728:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	4619      	mov	r1, r3
 8000734:	4822      	ldr	r0, [pc, #136]	; (80007c0 <MX_GPIO_Init+0x114>)
 8000736:	f000 fb21 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800073a:	230c      	movs	r3, #12
 800073c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800073e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	4619      	mov	r1, r3
 800074e:	481c      	ldr	r0, [pc, #112]	; (80007c0 <MX_GPIO_Init+0x114>)
 8000750:	f000 fb14 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000754:	23ff      	movs	r3, #255	; 0xff
 8000756:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800075c:	2301      	movs	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000760:	2302      	movs	r3, #2
 8000762:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	4619      	mov	r1, r3
 800076a:	4814      	ldr	r0, [pc, #80]	; (80007bc <MX_GPIO_Init+0x110>)
 800076c:	f000 fb06 	bl	8000d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000770:	2200      	movs	r2, #0
 8000772:	2100      	movs	r1, #0
 8000774:	2006      	movs	r0, #6
 8000776:	f000 faca 	bl	8000d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800077a:	2006      	movs	r0, #6
 800077c:	f000 fae3 	bl	8000d46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2100      	movs	r1, #0
 8000784:	2007      	movs	r0, #7
 8000786:	f000 fac2 	bl	8000d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800078a:	2007      	movs	r0, #7
 800078c:	f000 fadb 	bl	8000d46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	2008      	movs	r0, #8
 8000796:	f000 faba 	bl	8000d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800079a:	2008      	movs	r0, #8
 800079c:	f000 fad3 	bl	8000d46 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	2009      	movs	r0, #9
 80007a6:	f000 fab2 	bl	8000d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80007aa:	2009      	movs	r0, #9
 80007ac:	f000 facb 	bl	8000d46 <HAL_NVIC_EnableIRQ>

}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40020c00 	.word	0x40020c00
 80007c0:	40021800 	.word	0x40021800

080007c4 <LED_OnOff>:

/* USER CODE BEGIN 4 */
void LED_OnOff(int led, int interval){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
   HAL_GPIO_WritePin(GPIO_LED, led, GPIO_PIN_SET);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	2201      	movs	r2, #1
 80007d4:	4619      	mov	r1, r3
 80007d6:	4810      	ldr	r0, [pc, #64]	; (8000818 <LED_OnOff+0x54>)
 80007d8:	f000 fc7c 	bl	80010d4 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIO_LED_Nucleo, led, GPIO_PIN_SET);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	2201      	movs	r2, #1
 80007e2:	4619      	mov	r1, r3
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <LED_OnOff+0x58>)
 80007e6:	f000 fc75 	bl	80010d4 <HAL_GPIO_WritePin>

   HAL_Delay(interval);
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 f98f 	bl	8000b10 <HAL_Delay>

   HAL_GPIO_WritePin(GPIO_LED, led, GPIO_PIN_RESET);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	2200      	movs	r2, #0
 80007f8:	4619      	mov	r1, r3
 80007fa:	4807      	ldr	r0, [pc, #28]	; (8000818 <LED_OnOff+0x54>)
 80007fc:	f000 fc6a 	bl	80010d4 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIO_LED_Nucleo, led, GPIO_PIN_RESET);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	b29b      	uxth	r3, r3
 8000804:	2200      	movs	r2, #0
 8000806:	4619      	mov	r1, r3
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <LED_OnOff+0x58>)
 800080a:	f000 fc63 	bl	80010d4 <HAL_GPIO_WritePin>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40020c00 	.word	0x40020c00
 800081c:	40020400 	.word	0x40020400

08000820 <HAL_GPIO_EXTI_Callback>:
{
   HAL_GPIO_WritePin(GPIO_LED, led, GPIO_PIN_RESET);
   HAL_GPIO_WritePin(GPIO_LED_Nucleo, led, GPIO_PIN_RESET);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]
   if(GPIO_PIN == SW1){
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d110      	bne.n	8000852 <HAL_GPIO_EXTI_Callback+0x32>
	   speed ++;
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	4a20      	ldr	r2, [pc, #128]	; (80008b8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000838:	6013      	str	r3, [r2, #0]
      flag_SW1 = 1;
 800083a:	4b20      	ldr	r3, [pc, #128]	; (80008bc <HAL_GPIO_EXTI_Callback+0x9c>)
 800083c:	2201      	movs	r2, #1
 800083e:	601a      	str	r2, [r3, #0]
      flag_SW2 = 0;
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
      flag_SW3 = 0;
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
      flag_SW4 = 0;
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
   }
   if(GPIO_PIN == SW2){
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	2b02      	cmp	r3, #2
 8000856:	d10b      	bne.n	8000870 <HAL_GPIO_EXTI_Callback+0x50>
      flag_SW1 = 0;
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_GPIO_EXTI_Callback+0x9c>)
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
      flag_SW2 = 1;
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000860:	2201      	movs	r2, #1
 8000862:	601a      	str	r2, [r3, #0]
      flag_SW3 = 0;
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
      flag_SW4 = 0;
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
   }
   if(GPIO_PIN == SW3){
 8000870:	88fb      	ldrh	r3, [r7, #6]
 8000872:	2b04      	cmp	r3, #4
 8000874:	d10b      	bne.n	800088e <HAL_GPIO_EXTI_Callback+0x6e>
      flag_SW1 = 0;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_GPIO_EXTI_Callback+0x9c>)
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
      flag_SW2 = 0;
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_GPIO_EXTI_Callback+0xa0>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
      flag_SW3 = 1;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000884:	2201      	movs	r2, #1
 8000886:	601a      	str	r2, [r3, #0]
      flag_SW4 = 0;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
   }
   if(GPIO_PIN == SW4){
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	2b08      	cmp	r3, #8
 8000892:	d10b      	bne.n	80008ac <HAL_GPIO_EXTI_Callback+0x8c>
      flag_SW1 = 0;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_GPIO_EXTI_Callback+0x9c>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
      flag_SW2 = 0;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_GPIO_EXTI_Callback+0xa0>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
      flag_SW3 = 0;
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_GPIO_EXTI_Callback+0xa4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
      flag_SW4 = 1;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	601a      	str	r2, [r3, #0]
   }
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	20000038 	.word	0x20000038
 80008bc:	20000028 	.word	0x20000028
 80008c0:	2000002c 	.word	0x2000002c
 80008c4:	20000030 	.word	0x20000030
 80008c8:	20000034 	.word	0x20000034

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	4a0f      	ldr	r2, [pc, #60]	; (8000924 <HAL_MspInit+0x4c>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ec:	6453      	str	r3, [r2, #68]	; 0x44
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	4a08      	ldr	r2, [pc, #32]	; (8000924 <HAL_MspInit+0x4c>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000908:	6413      	str	r3, [r2, #64]	; 0x40
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800092c:	e7fe      	b.n	800092c <NMI_Handler+0x4>

0800092e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <MemManage_Handler+0x4>

0800093a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <BusFault_Handler+0x4>

08000940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <UsageFault_Handler+0x4>

08000946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000974:	f000 f8ac 	bl	8000ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}

0800097c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000980:	2001      	movs	r0, #1
 8000982:	f000 fbc1 	bl	8001108 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}

0800098a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800098e:	2002      	movs	r0, #2
 8000990:	f000 fbba 	bl	8001108 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800099c:	2004      	movs	r0, #4
 800099e:	f000 fbb3 	bl	8001108 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80009aa:	2008      	movs	r0, #8
 80009ac:	f000 fbac 	bl	8001108 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <SystemInit+0x20>)
 80009ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <SystemInit+0x20>)
 80009c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80009d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a10 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009de:	490e      	ldr	r1, [pc, #56]	; (8000a18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009e0:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009f4:	4c0b      	ldr	r4, [pc, #44]	; (8000a24 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a02:	f7ff ffd7 	bl	80009b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a06:	f000 ffbb 	bl	8001980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0a:	f7ff fd71 	bl	80004f0 <main>
  bx  lr    
 8000a0e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a10:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a1c:	08001a10 	.word	0x08001a10
  ldr r2, =_sbss
 8000a20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a24:	20000040 	.word	0x20000040

08000a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC_IRQHandler>
	...

08000a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <HAL_Init+0x40>)
 8000a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <HAL_Init+0x40>)
 8000a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_Init+0x40>)
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f94f 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5a:	200f      	movs	r0, #15
 8000a5c:	f000 f808 	bl	8000a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a60:	f7ff ff3a 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023c00 	.word	0x40023c00

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_InitTick+0x54>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_InitTick+0x58>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f967 	bl	8000d62 <HAL_SYSTICK_Config>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00e      	b.n	8000abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d80a      	bhi.n	8000aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f000 f92f 	bl	8000d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4a06      	ldr	r2, [pc, #24]	; (8000acc <HAL_InitTick+0x5c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000004 	.word	0x20000004

08000ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_IncTick+0x20>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x24>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_IncTick+0x24>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008
 8000af4:	2000003c 	.word	0x2000003c

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <HAL_GetTick+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	2000003c 	.word	0x2000003c

08000b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b18:	f7ff ffee 	bl	8000af8 <HAL_GetTick>
 8000b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b28:	d005      	beq.n	8000b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <HAL_Delay+0x44>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	4413      	add	r3, r2
 8000b34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b36:	bf00      	nop
 8000b38:	f7ff ffde 	bl	8000af8 <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d8f7      	bhi.n	8000b38 <HAL_Delay+0x28>
  {
  }
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000008 	.word	0x20000008

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db0b      	blt.n	8000be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 021f 	and.w	r2, r3, #31
 8000bd4:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <__NVIC_EnableIRQ+0x38>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	2001      	movs	r0, #1
 8000bde:	fa00 f202 	lsl.w	r2, r0, r2
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	; (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	; (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	; 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f7ff ff8e 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff29 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff3e 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ff8e 	bl	8000c4c <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff5d 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff31 	bl	8000bbc <__NVIC_EnableIRQ>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffa2 	bl	8000cb4 <SysTick_Config>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	e177      	b.n	8001088 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	f040 8166 	bne.w	8001082 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d005      	beq.n	8000dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d130      	bne.n	8000e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	091b      	lsrs	r3, r3, #4
 8000e1a:	f003 0201 	and.w	r2, r3, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d017      	beq.n	8000e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d123      	bne.n	8000ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	08da      	lsrs	r2, r3, #3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	691a      	ldr	r2, [r3, #16]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3208      	adds	r2, #8
 8000eba:	69b9      	ldr	r1, [r7, #24]
 8000ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0203 	and.w	r2, r3, #3
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80c0 	beq.w	8001082 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b66      	ldr	r3, [pc, #408]	; (80010a0 <HAL_GPIO_Init+0x324>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a65      	ldr	r2, [pc, #404]	; (80010a0 <HAL_GPIO_Init+0x324>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b63      	ldr	r3, [pc, #396]	; (80010a0 <HAL_GPIO_Init+0x324>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1e:	4a61      	ldr	r2, [pc, #388]	; (80010a4 <HAL_GPIO_Init+0x328>)
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	220f      	movs	r2, #15
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a58      	ldr	r2, [pc, #352]	; (80010a8 <HAL_GPIO_Init+0x32c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d037      	beq.n	8000fba <HAL_GPIO_Init+0x23e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a57      	ldr	r2, [pc, #348]	; (80010ac <HAL_GPIO_Init+0x330>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d031      	beq.n	8000fb6 <HAL_GPIO_Init+0x23a>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a56      	ldr	r2, [pc, #344]	; (80010b0 <HAL_GPIO_Init+0x334>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d02b      	beq.n	8000fb2 <HAL_GPIO_Init+0x236>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a55      	ldr	r2, [pc, #340]	; (80010b4 <HAL_GPIO_Init+0x338>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d025      	beq.n	8000fae <HAL_GPIO_Init+0x232>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a54      	ldr	r2, [pc, #336]	; (80010b8 <HAL_GPIO_Init+0x33c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d01f      	beq.n	8000faa <HAL_GPIO_Init+0x22e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a53      	ldr	r2, [pc, #332]	; (80010bc <HAL_GPIO_Init+0x340>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d019      	beq.n	8000fa6 <HAL_GPIO_Init+0x22a>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a52      	ldr	r2, [pc, #328]	; (80010c0 <HAL_GPIO_Init+0x344>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d013      	beq.n	8000fa2 <HAL_GPIO_Init+0x226>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a51      	ldr	r2, [pc, #324]	; (80010c4 <HAL_GPIO_Init+0x348>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d00d      	beq.n	8000f9e <HAL_GPIO_Init+0x222>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a50      	ldr	r2, [pc, #320]	; (80010c8 <HAL_GPIO_Init+0x34c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d007      	beq.n	8000f9a <HAL_GPIO_Init+0x21e>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4f      	ldr	r2, [pc, #316]	; (80010cc <HAL_GPIO_Init+0x350>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d101      	bne.n	8000f96 <HAL_GPIO_Init+0x21a>
 8000f92:	2309      	movs	r3, #9
 8000f94:	e012      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000f96:	230a      	movs	r3, #10
 8000f98:	e010      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	e00e      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	e00c      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	e00a      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	e008      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000faa:	2304      	movs	r3, #4
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x240>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	f002 0203 	and.w	r2, r2, #3
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fcc:	4935      	ldr	r1, [pc, #212]	; (80010a4 <HAL_GPIO_Init+0x328>)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fda:	4b3d      	ldr	r3, [pc, #244]	; (80010d0 <HAL_GPIO_Init+0x354>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffe:	4a34      	ldr	r2, [pc, #208]	; (80010d0 <HAL_GPIO_Init+0x354>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001004:	4b32      	ldr	r3, [pc, #200]	; (80010d0 <HAL_GPIO_Init+0x354>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001028:	4a29      	ldr	r2, [pc, #164]	; (80010d0 <HAL_GPIO_Init+0x354>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800102e:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <HAL_GPIO_Init+0x354>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001052:	4a1f      	ldr	r2, [pc, #124]	; (80010d0 <HAL_GPIO_Init+0x354>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <HAL_GPIO_Init+0x354>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800107c:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <HAL_GPIO_Init+0x354>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	f67f ae84 	bls.w	8000d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3724      	adds	r7, #36	; 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40021400 	.word	0x40021400
 80010c0:	40021800 	.word	0x40021800
 80010c4:	40021c00 	.word	0x40021c00
 80010c8:	40022000 	.word	0x40022000
 80010cc:	40022400 	.word	0x40022400
 80010d0:	40013c00 	.word	0x40013c00

080010d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
 80010e0:	4613      	mov	r3, r2
 80010e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010f0:	e003      	b.n	80010fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010f2:	887b      	ldrh	r3, [r7, #2]
 80010f4:	041a      	lsls	r2, r3, #16
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	619a      	str	r2, [r3, #24]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001114:	695a      	ldr	r2, [r3, #20]
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	4013      	ands	r3, r2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d006      	beq.n	800112c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800111e:	4a05      	ldr	r2, [pc, #20]	; (8001134 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001120:	88fb      	ldrh	r3, [r7, #6]
 8001122:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fb7a 	bl	8000820 <HAL_GPIO_EXTI_Callback>
  }
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40013c00 	.word	0x40013c00

08001138 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e267      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d075      	beq.n	8001242 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001156:	4b88      	ldr	r3, [pc, #544]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 030c 	and.w	r3, r3, #12
 800115e:	2b04      	cmp	r3, #4
 8001160:	d00c      	beq.n	800117c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001162:	4b85      	ldr	r3, [pc, #532]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800116a:	2b08      	cmp	r3, #8
 800116c:	d112      	bne.n	8001194 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800116e:	4b82      	ldr	r3, [pc, #520]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001176:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800117a:	d10b      	bne.n	8001194 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117c:	4b7e      	ldr	r3, [pc, #504]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d05b      	beq.n	8001240 <HAL_RCC_OscConfig+0x108>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d157      	bne.n	8001240 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e242      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800119c:	d106      	bne.n	80011ac <HAL_RCC_OscConfig+0x74>
 800119e:	4b76      	ldr	r3, [pc, #472]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a75      	ldr	r2, [pc, #468]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e01d      	b.n	80011e8 <HAL_RCC_OscConfig+0xb0>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011b4:	d10c      	bne.n	80011d0 <HAL_RCC_OscConfig+0x98>
 80011b6:	4b70      	ldr	r3, [pc, #448]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a6f      	ldr	r2, [pc, #444]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	4b6d      	ldr	r3, [pc, #436]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a6c      	ldr	r2, [pc, #432]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e00b      	b.n	80011e8 <HAL_RCC_OscConfig+0xb0>
 80011d0:	4b69      	ldr	r3, [pc, #420]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a68      	ldr	r2, [pc, #416]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b66      	ldr	r3, [pc, #408]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a65      	ldr	r2, [pc, #404]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80011e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d013      	beq.n	8001218 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fc82 	bl	8000af8 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f8:	f7ff fc7e 	bl	8000af8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b64      	cmp	r3, #100	; 0x64
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e207      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120a:	4b5b      	ldr	r3, [pc, #364]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f0      	beq.n	80011f8 <HAL_RCC_OscConfig+0xc0>
 8001216:	e014      	b.n	8001242 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff fc6e 	bl	8000af8 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001220:	f7ff fc6a 	bl	8000af8 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b64      	cmp	r3, #100	; 0x64
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e1f3      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001232:	4b51      	ldr	r3, [pc, #324]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f0      	bne.n	8001220 <HAL_RCC_OscConfig+0xe8>
 800123e:	e000      	b.n	8001242 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d063      	beq.n	8001316 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800124e:	4b4a      	ldr	r3, [pc, #296]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00b      	beq.n	8001272 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800125a:	4b47      	ldr	r3, [pc, #284]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001262:	2b08      	cmp	r3, #8
 8001264:	d11c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001266:	4b44      	ldr	r3, [pc, #272]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d116      	bne.n	80012a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001272:	4b41      	ldr	r3, [pc, #260]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d005      	beq.n	800128a <HAL_RCC_OscConfig+0x152>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d001      	beq.n	800128a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e1c7      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128a:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4937      	ldr	r1, [pc, #220]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129e:	e03a      	b.n	8001316 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d020      	beq.n	80012ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012a8:	4b34      	ldr	r3, [pc, #208]	; (800137c <HAL_RCC_OscConfig+0x244>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ae:	f7ff fc23 	bl	8000af8 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b6:	f7ff fc1f 	bl	8000af8 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e1a8      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c8:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f0      	beq.n	80012b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d4:	4b28      	ldr	r3, [pc, #160]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	4925      	ldr	r1, [pc, #148]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	600b      	str	r3, [r1, #0]
 80012e8:	e015      	b.n	8001316 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <HAL_RCC_OscConfig+0x244>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f0:	f7ff fc02 	bl	8000af8 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f8:	f7ff fbfe 	bl	8000af8 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e187      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f0      	bne.n	80012f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b00      	cmp	r3, #0
 8001320:	d036      	beq.n	8001390 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d016      	beq.n	8001358 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_RCC_OscConfig+0x248>)
 800132c:	2201      	movs	r2, #1
 800132e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001330:	f7ff fbe2 	bl	8000af8 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001338:	f7ff fbde 	bl	8000af8 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e167      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_RCC_OscConfig+0x240>)
 800134c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f0      	beq.n	8001338 <HAL_RCC_OscConfig+0x200>
 8001356:	e01b      	b.n	8001390 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_RCC_OscConfig+0x248>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135e:	f7ff fbcb 	bl	8000af8 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001364:	e00e      	b.n	8001384 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001366:	f7ff fbc7 	bl	8000af8 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d907      	bls.n	8001384 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e150      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
 8001378:	40023800 	.word	0x40023800
 800137c:	42470000 	.word	0x42470000
 8001380:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001384:	4b88      	ldr	r3, [pc, #544]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1ea      	bne.n	8001366 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 8097 	beq.w	80014cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013a2:	4b81      	ldr	r3, [pc, #516]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10f      	bne.n	80013ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	4b7d      	ldr	r3, [pc, #500]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a7c      	ldr	r2, [pc, #496]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b7a      	ldr	r3, [pc, #488]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ca:	2301      	movs	r3, #1
 80013cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ce:	4b77      	ldr	r3, [pc, #476]	; (80015ac <HAL_RCC_OscConfig+0x474>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d118      	bne.n	800140c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013da:	4b74      	ldr	r3, [pc, #464]	; (80015ac <HAL_RCC_OscConfig+0x474>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a73      	ldr	r2, [pc, #460]	; (80015ac <HAL_RCC_OscConfig+0x474>)
 80013e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e6:	f7ff fb87 	bl	8000af8 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ee:	f7ff fb83 	bl	8000af8 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e10c      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001400:	4b6a      	ldr	r3, [pc, #424]	; (80015ac <HAL_RCC_OscConfig+0x474>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d106      	bne.n	8001422 <HAL_RCC_OscConfig+0x2ea>
 8001414:	4b64      	ldr	r3, [pc, #400]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001418:	4a63      	ldr	r2, [pc, #396]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6713      	str	r3, [r2, #112]	; 0x70
 8001420:	e01c      	b.n	800145c <HAL_RCC_OscConfig+0x324>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b05      	cmp	r3, #5
 8001428:	d10c      	bne.n	8001444 <HAL_RCC_OscConfig+0x30c>
 800142a:	4b5f      	ldr	r3, [pc, #380]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 800142c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142e:	4a5e      	ldr	r2, [pc, #376]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	6713      	str	r3, [r2, #112]	; 0x70
 8001436:	4b5c      	ldr	r3, [pc, #368]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143a:	4a5b      	ldr	r2, [pc, #364]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6713      	str	r3, [r2, #112]	; 0x70
 8001442:	e00b      	b.n	800145c <HAL_RCC_OscConfig+0x324>
 8001444:	4b58      	ldr	r3, [pc, #352]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001448:	4a57      	ldr	r2, [pc, #348]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	6713      	str	r3, [r2, #112]	; 0x70
 8001450:	4b55      	ldr	r3, [pc, #340]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001454:	4a54      	ldr	r2, [pc, #336]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001456:	f023 0304 	bic.w	r3, r3, #4
 800145a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d015      	beq.n	8001490 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001464:	f7ff fb48 	bl	8000af8 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146a:	e00a      	b.n	8001482 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146c:	f7ff fb44 	bl	8000af8 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f241 3288 	movw	r2, #5000	; 0x1388
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e0cb      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001482:	4b49      	ldr	r3, [pc, #292]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0ee      	beq.n	800146c <HAL_RCC_OscConfig+0x334>
 800148e:	e014      	b.n	80014ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001490:	f7ff fb32 	bl	8000af8 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001496:	e00a      	b.n	80014ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001498:	f7ff fb2e 	bl	8000af8 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e0b5      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ae:	4b3e      	ldr	r3, [pc, #248]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1ee      	bne.n	8001498 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d105      	bne.n	80014cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c0:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	4a38      	ldr	r2, [pc, #224]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 80014c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 80a1 	beq.w	8001618 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014d6:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d05c      	beq.n	800159c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d141      	bne.n	800156e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ea:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <HAL_RCC_OscConfig+0x478>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f0:	f7ff fb02 	bl	8000af8 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f8:	f7ff fafe 	bl	8000af8 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e087      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150a:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69da      	ldr	r2, [r3, #28]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	019b      	lsls	r3, r3, #6
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	085b      	lsrs	r3, r3, #1
 800152e:	3b01      	subs	r3, #1
 8001530:	041b      	lsls	r3, r3, #16
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001538:	061b      	lsls	r3, r3, #24
 800153a:	491b      	ldr	r1, [pc, #108]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_RCC_OscConfig+0x478>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001546:	f7ff fad7 	bl	8000af8 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154e:	f7ff fad3 	bl	8000af8 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e05c      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x416>
 800156c:	e054      	b.n	8001618 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <HAL_RCC_OscConfig+0x478>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fac0 	bl	8000af8 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157c:	f7ff fabc 	bl	8000af8 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e045      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_RCC_OscConfig+0x470>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x444>
 800159a:	e03d      	b.n	8001618 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d107      	bne.n	80015b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e038      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40007000 	.word	0x40007000
 80015b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <HAL_RCC_OscConfig+0x4ec>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d028      	beq.n	8001614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d121      	bne.n	8001614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015da:	429a      	cmp	r2, r3
 80015dc:	d11a      	bne.n	8001614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015e4:	4013      	ands	r3, r2
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d111      	bne.n	8001614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	085b      	lsrs	r3, r3, #1
 80015fc:	3b01      	subs	r3, #1
 80015fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001600:	429a      	cmp	r2, r3
 8001602:	d107      	bne.n	8001614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001610:	429a      	cmp	r2, r3
 8001612:	d001      	beq.n	8001618 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800

08001628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0cc      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800163c:	4b68      	ldr	r3, [pc, #416]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d90c      	bls.n	8001664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b65      	ldr	r3, [pc, #404]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b63      	ldr	r3, [pc, #396]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0b8      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d020      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800167c:	4b59      	ldr	r3, [pc, #356]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4a58      	ldr	r2, [pc, #352]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001686:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001694:	4b53      	ldr	r3, [pc, #332]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4a52      	ldr	r2, [pc, #328]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800169e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a0:	4b50      	ldr	r3, [pc, #320]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	494d      	ldr	r1, [pc, #308]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d044      	beq.n	8001748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d119      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e07f      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d003      	beq.n	80016e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e6:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d109      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e06f      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f6:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e067      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001706:	4b37      	ldr	r3, [pc, #220]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f023 0203 	bic.w	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4934      	ldr	r1, [pc, #208]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	4313      	orrs	r3, r2
 8001716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001718:	f7ff f9ee 	bl	8000af8 <HAL_GetTick>
 800171c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	e00a      	b.n	8001736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001720:	f7ff f9ea 	bl	8000af8 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	; 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e04f      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 020c 	and.w	r2, r3, #12
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	429a      	cmp	r2, r3
 8001746:	d1eb      	bne.n	8001720 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001748:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 030f 	and.w	r3, r3, #15
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d20c      	bcs.n	8001770 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e032      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	4916      	ldr	r1, [pc, #88]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	4313      	orrs	r3, r2
 800178c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d009      	beq.n	80017ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	490e      	ldr	r1, [pc, #56]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ae:	f000 f821 	bl	80017f4 <HAL_RCC_GetSysClockFreq>
 80017b2:	4602      	mov	r2, r0
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	490a      	ldr	r1, [pc, #40]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 80017c0:	5ccb      	ldrb	r3, [r1, r3]
 80017c2:	fa22 f303 	lsr.w	r3, r2, r3
 80017c6:	4a09      	ldr	r2, [pc, #36]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80017c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_RCC_ClockConfig+0x1c8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff f94e 	bl	8000a70 <HAL_InitTick>

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023c00 	.word	0x40023c00
 80017e4:	40023800 	.word	0x40023800
 80017e8:	080019f0 	.word	0x080019f0
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000004 	.word	0x20000004

080017f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017f8:	b090      	sub	sp, #64	; 0x40
 80017fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001800:	2300      	movs	r3, #0
 8001802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001804:	2300      	movs	r3, #0
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800180c:	4b59      	ldr	r3, [pc, #356]	; (8001974 <HAL_RCC_GetSysClockFreq+0x180>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b08      	cmp	r3, #8
 8001816:	d00d      	beq.n	8001834 <HAL_RCC_GetSysClockFreq+0x40>
 8001818:	2b08      	cmp	r3, #8
 800181a:	f200 80a1 	bhi.w	8001960 <HAL_RCC_GetSysClockFreq+0x16c>
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0x34>
 8001822:	2b04      	cmp	r3, #4
 8001824:	d003      	beq.n	800182e <HAL_RCC_GetSysClockFreq+0x3a>
 8001826:	e09b      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001828:	4b53      	ldr	r3, [pc, #332]	; (8001978 <HAL_RCC_GetSysClockFreq+0x184>)
 800182a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800182c:	e09b      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800182e:	4b53      	ldr	r3, [pc, #332]	; (800197c <HAL_RCC_GetSysClockFreq+0x188>)
 8001830:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001832:	e098      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001834:	4b4f      	ldr	r3, [pc, #316]	; (8001974 <HAL_RCC_GetSysClockFreq+0x180>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800183c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800183e:	4b4d      	ldr	r3, [pc, #308]	; (8001974 <HAL_RCC_GetSysClockFreq+0x180>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d028      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184a:	4b4a      	ldr	r3, [pc, #296]	; (8001974 <HAL_RCC_GetSysClockFreq+0x180>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	099b      	lsrs	r3, r3, #6
 8001850:	2200      	movs	r2, #0
 8001852:	623b      	str	r3, [r7, #32]
 8001854:	627a      	str	r2, [r7, #36]	; 0x24
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800185c:	2100      	movs	r1, #0
 800185e:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_RCC_GetSysClockFreq+0x188>)
 8001860:	fb03 f201 	mul.w	r2, r3, r1
 8001864:	2300      	movs	r3, #0
 8001866:	fb00 f303 	mul.w	r3, r0, r3
 800186a:	4413      	add	r3, r2
 800186c:	4a43      	ldr	r2, [pc, #268]	; (800197c <HAL_RCC_GetSysClockFreq+0x188>)
 800186e:	fba0 1202 	umull	r1, r2, r0, r2
 8001872:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001874:	460a      	mov	r2, r1
 8001876:	62ba      	str	r2, [r7, #40]	; 0x28
 8001878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800187a:	4413      	add	r3, r2
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800187e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001880:	2200      	movs	r2, #0
 8001882:	61bb      	str	r3, [r7, #24]
 8001884:	61fa      	str	r2, [r7, #28]
 8001886:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800188a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800188e:	f7fe fcad 	bl	80001ec <__aeabi_uldivmod>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4613      	mov	r3, r2
 8001898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800189a:	e053      	b.n	8001944 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189c:	4b35      	ldr	r3, [pc, #212]	; (8001974 <HAL_RCC_GetSysClockFreq+0x180>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	099b      	lsrs	r3, r3, #6
 80018a2:	2200      	movs	r2, #0
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	617a      	str	r2, [r7, #20]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018ae:	f04f 0b00 	mov.w	fp, #0
 80018b2:	4652      	mov	r2, sl
 80018b4:	465b      	mov	r3, fp
 80018b6:	f04f 0000 	mov.w	r0, #0
 80018ba:	f04f 0100 	mov.w	r1, #0
 80018be:	0159      	lsls	r1, r3, #5
 80018c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018c4:	0150      	lsls	r0, r2, #5
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	ebb2 080a 	subs.w	r8, r2, sl
 80018ce:	eb63 090b 	sbc.w	r9, r3, fp
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018e6:	ebb2 0408 	subs.w	r4, r2, r8
 80018ea:	eb63 0509 	sbc.w	r5, r3, r9
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	00eb      	lsls	r3, r5, #3
 80018f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018fc:	00e2      	lsls	r2, r4, #3
 80018fe:	4614      	mov	r4, r2
 8001900:	461d      	mov	r5, r3
 8001902:	eb14 030a 	adds.w	r3, r4, sl
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	eb45 030b 	adc.w	r3, r5, fp
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	e9d7 4500 	ldrd	r4, r5, [r7]
 800191a:	4629      	mov	r1, r5
 800191c:	028b      	lsls	r3, r1, #10
 800191e:	4621      	mov	r1, r4
 8001920:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001924:	4621      	mov	r1, r4
 8001926:	028a      	lsls	r2, r1, #10
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800192e:	2200      	movs	r2, #0
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	60fa      	str	r2, [r7, #12]
 8001934:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001938:	f7fe fc58 	bl	80001ec <__aeabi_uldivmod>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4613      	mov	r3, r2
 8001942:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_GetSysClockFreq+0x180>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	0c1b      	lsrs	r3, r3, #16
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	3301      	adds	r3, #1
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001954:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001958:	fbb2 f3f3 	udiv	r3, r2, r3
 800195c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800195e:	e002      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_RCC_GetSysClockFreq+0x184>)
 8001962:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001968:	4618      	mov	r0, r3
 800196a:	3740      	adds	r7, #64	; 0x40
 800196c:	46bd      	mov	sp, r7
 800196e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800
 8001978:	00f42400 	.word	0x00f42400
 800197c:	017d7840 	.word	0x017d7840

08001980 <__libc_init_array>:
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	4d0d      	ldr	r5, [pc, #52]	; (80019b8 <__libc_init_array+0x38>)
 8001984:	4c0d      	ldr	r4, [pc, #52]	; (80019bc <__libc_init_array+0x3c>)
 8001986:	1b64      	subs	r4, r4, r5
 8001988:	10a4      	asrs	r4, r4, #2
 800198a:	2600      	movs	r6, #0
 800198c:	42a6      	cmp	r6, r4
 800198e:	d109      	bne.n	80019a4 <__libc_init_array+0x24>
 8001990:	4d0b      	ldr	r5, [pc, #44]	; (80019c0 <__libc_init_array+0x40>)
 8001992:	4c0c      	ldr	r4, [pc, #48]	; (80019c4 <__libc_init_array+0x44>)
 8001994:	f000 f820 	bl	80019d8 <_init>
 8001998:	1b64      	subs	r4, r4, r5
 800199a:	10a4      	asrs	r4, r4, #2
 800199c:	2600      	movs	r6, #0
 800199e:	42a6      	cmp	r6, r4
 80019a0:	d105      	bne.n	80019ae <__libc_init_array+0x2e>
 80019a2:	bd70      	pop	{r4, r5, r6, pc}
 80019a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80019a8:	4798      	blx	r3
 80019aa:	3601      	adds	r6, #1
 80019ac:	e7ee      	b.n	800198c <__libc_init_array+0xc>
 80019ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80019b2:	4798      	blx	r3
 80019b4:	3601      	adds	r6, #1
 80019b6:	e7f2      	b.n	800199e <__libc_init_array+0x1e>
 80019b8:	08001a08 	.word	0x08001a08
 80019bc:	08001a08 	.word	0x08001a08
 80019c0:	08001a08 	.word	0x08001a08
 80019c4:	08001a0c 	.word	0x08001a0c

080019c8 <memset>:
 80019c8:	4402      	add	r2, r0
 80019ca:	4603      	mov	r3, r0
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d100      	bne.n	80019d2 <memset+0xa>
 80019d0:	4770      	bx	lr
 80019d2:	f803 1b01 	strb.w	r1, [r3], #1
 80019d6:	e7f9      	b.n	80019cc <memset+0x4>

080019d8 <_init>:
 80019d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019da:	bf00      	nop
 80019dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019de:	bc08      	pop	{r3}
 80019e0:	469e      	mov	lr, r3
 80019e2:	4770      	bx	lr

080019e4 <_fini>:
 80019e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019e6:	bf00      	nop
 80019e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ea:	bc08      	pop	{r3}
 80019ec:	469e      	mov	lr, r3
 80019ee:	4770      	bx	lr
