
UART_Plus3.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c44  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002df0  08002df0  00012df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e08  08002e08  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e08  08002e08  00012e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e10  08002e10  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e10  08002e10  00012e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e14  08002e14  00012e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08002e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002010c  2**0
                  CONTENTS
 10 .bss          00000064  2000010c  2000010c  0002010c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000170  20000170  0002010c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008e3e  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001607  00000000  00000000  00028f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e8  00000000  00000000  0002a588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000670  00000000  00000000  0002ac70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021beb  00000000  00000000  0002b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000084f2  00000000  00000000  0004cecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdcbf  00000000  00000000  000553bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012307c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b34  00000000  00000000  001230cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000010c 	.word	0x2000010c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002dd8 	.word	0x08002dd8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000110 	.word	0x20000110
 80001e8:	08002dd8 	.word	0x08002dd8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f000 fb11 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f8a7 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f000 f92f 	bl	8000760 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000502:	f000 f903 	bl	800070c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  LED_OnOff(LED_ALL, 500);
 8000506:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800050a:	20ff      	movs	r0, #255	; 0xff
 800050c:	f000 f99a 	bl	8000844 <LED_OnOff>
  HAL_UART_Transmit(&huart3, (uint8_t*)TxBuffer, TxBufferSize, 0xFFFF);
 8000510:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000514:	2235      	movs	r2, #53	; 0x35
 8000516:	4943      	ldr	r1, [pc, #268]	; (8000624 <main+0x134>)
 8000518:	4843      	ldr	r0, [pc, #268]	; (8000628 <main+0x138>)
 800051a:	f001 fbc8 	bl	8001cae <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
     if(HAL_UART_Receive(&huart3, &data, sizeof(data), 5000)== HAL_OK)
 800051e:	1db9      	adds	r1, r7, #6
 8000520:	f241 3388 	movw	r3, #5000	; 0x1388
 8000524:	2202      	movs	r2, #2
 8000526:	4840      	ldr	r0, [pc, #256]	; (8000628 <main+0x138>)
 8000528:	f001 fc53 	bl	8001dd2 <HAL_UART_Receive>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d1f5      	bne.n	800051e <main+0x2e>
     {
        if(data == '11'){
 8000532:	88fb      	ldrh	r3, [r7, #6]
 8000534:	f243 1231 	movw	r2, #12593	; 0x3131
 8000538:	4293      	cmp	r3, r2
 800053a:	d109      	bne.n	8000550 <main+0x60>
           HAL_UART_Transmit(&huart3,(uint8_t*)TxBuffer_2 , TxBufferSize_2, 0xFFFF);
 800053c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000540:	2213      	movs	r2, #19
 8000542:	493a      	ldr	r1, [pc, #232]	; (800062c <main+0x13c>)
 8000544:	4838      	ldr	r0, [pc, #224]	; (8000628 <main+0x138>)
 8000546:	f001 fbb2 	bl	8001cae <HAL_UART_Transmit>
           LED_On(0x01);
 800054a:	2001      	movs	r0, #1
 800054c:	f000 f9a8 	bl	80008a0 <LED_On>
        }
        if(data == '01'){
 8000550:	88fb      	ldrh	r3, [r7, #6]
 8000552:	f243 0231 	movw	r2, #12337	; 0x3031
 8000556:	4293      	cmp	r3, r2
 8000558:	d109      	bne.n	800056e <main+0x7e>
           HAL_UART_Transmit(&huart3,(uint8_t*)TxBuffer_3 , TxBufferSize_3, 0xFFFF);
 800055a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800055e:	2215      	movs	r2, #21
 8000560:	4933      	ldr	r1, [pc, #204]	; (8000630 <main+0x140>)
 8000562:	4831      	ldr	r0, [pc, #196]	; (8000628 <main+0x138>)
 8000564:	f001 fba3 	bl	8001cae <HAL_UART_Transmit>
           LED_Off(0x01);
 8000568:	2001      	movs	r0, #1
 800056a:	f000 f9b3 	bl	80008d4 <LED_Off>
        }
        if(data == '12'){
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	f243 1232 	movw	r2, #12594	; 0x3132
 8000574:	4293      	cmp	r3, r2
 8000576:	d109      	bne.n	800058c <main+0x9c>
           HAL_UART_Transmit(&huart3,(uint8_t*)TxBuffer_4 , TxBufferSize_4, 0xFFFF);
 8000578:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057c:	2215      	movs	r2, #21
 800057e:	492d      	ldr	r1, [pc, #180]	; (8000634 <main+0x144>)
 8000580:	4829      	ldr	r0, [pc, #164]	; (8000628 <main+0x138>)
 8000582:	f001 fb94 	bl	8001cae <HAL_UART_Transmit>
           LED_On(0x02);
 8000586:	2002      	movs	r0, #2
 8000588:	f000 f98a 	bl	80008a0 <LED_On>
        }
        if(data == '02'){
 800058c:	88fb      	ldrh	r3, [r7, #6]
 800058e:	f243 0232 	movw	r2, #12338	; 0x3032
 8000592:	4293      	cmp	r3, r2
 8000594:	d109      	bne.n	80005aa <main+0xba>
           HAL_UART_Transmit(&huart3,(uint8_t*)TxBuffer_5 , TxBufferSize_5, 0xFFFF);
 8000596:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800059a:	2217      	movs	r2, #23
 800059c:	4926      	ldr	r1, [pc, #152]	; (8000638 <main+0x148>)
 800059e:	4822      	ldr	r0, [pc, #136]	; (8000628 <main+0x138>)
 80005a0:	f001 fb85 	bl	8001cae <HAL_UART_Transmit>
           LED_Off(0x02);
 80005a4:	2002      	movs	r0, #2
 80005a6:	f000 f995 	bl	80008d4 <LED_Off>
        }
        if(data == '13'){
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	f243 1233 	movw	r2, #12595	; 0x3133
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d109      	bne.n	80005c8 <main+0xd8>
           HAL_UART_Transmit(&huart3,(uint8_t*)TxBuffer_6 , TxBufferSize_6, 0xFFFF);
 80005b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b8:	2217      	movs	r2, #23
 80005ba:	4920      	ldr	r1, [pc, #128]	; (800063c <main+0x14c>)
 80005bc:	481a      	ldr	r0, [pc, #104]	; (8000628 <main+0x138>)
 80005be:	f001 fb76 	bl	8001cae <HAL_UART_Transmit>
           LED_On(0x04);
 80005c2:	2004      	movs	r0, #4
 80005c4:	f000 f96c 	bl	80008a0 <LED_On>
        }
        if(data == '03'){
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	f243 0233 	movw	r2, #12339	; 0x3033
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d109      	bne.n	80005e6 <main+0xf6>
           HAL_UART_Transmit(&huart3,(uint8_t*)TxBuffer_7 , TxBufferSize_7, 0xFFFF);
 80005d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d6:	2219      	movs	r2, #25
 80005d8:	4919      	ldr	r1, [pc, #100]	; (8000640 <main+0x150>)
 80005da:	4813      	ldr	r0, [pc, #76]	; (8000628 <main+0x138>)
 80005dc:	f001 fb67 	bl	8001cae <HAL_UART_Transmit>
           LED_Off(0x04);
 80005e0:	2004      	movs	r0, #4
 80005e2:	f000 f977 	bl	80008d4 <LED_Off>
        }
        if(data == '14'){
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	f243 1234 	movw	r2, #12596	; 0x3134
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d109      	bne.n	8000604 <main+0x114>
           HAL_UART_Transmit(&huart3,(uint8_t*)TxBuffer_8 , TxBufferSize_8, 0xFFFF);
 80005f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005f4:	2219      	movs	r2, #25
 80005f6:	4913      	ldr	r1, [pc, #76]	; (8000644 <main+0x154>)
 80005f8:	480b      	ldr	r0, [pc, #44]	; (8000628 <main+0x138>)
 80005fa:	f001 fb58 	bl	8001cae <HAL_UART_Transmit>
           LED_On(0x08);
 80005fe:	2008      	movs	r0, #8
 8000600:	f000 f94e 	bl	80008a0 <LED_On>
        }
        if(data == '04'){
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	f243 0234 	movw	r2, #12340	; 0x3034
 800060a:	4293      	cmp	r3, r2
 800060c:	d187      	bne.n	800051e <main+0x2e>
           HAL_UART_Transmit(&huart3,(uint8_t*)TxBuffer_9 , TxBufferSize_9, 0xFFFF);
 800060e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000612:	221b      	movs	r2, #27
 8000614:	490c      	ldr	r1, [pc, #48]	; (8000648 <main+0x158>)
 8000616:	4804      	ldr	r0, [pc, #16]	; (8000628 <main+0x138>)
 8000618:	f001 fb49 	bl	8001cae <HAL_UART_Transmit>
           LED_Off(0x08);
 800061c:	2008      	movs	r0, #8
 800061e:	f000 f959 	bl	80008d4 <LED_Off>
     if(HAL_UART_Receive(&huart3, &data, sizeof(data), 5000)== HAL_OK)
 8000622:	e77c      	b.n	800051e <main+0x2e>
 8000624:	20000000 	.word	0x20000000
 8000628:	20000128 	.word	0x20000128
 800062c:	20000038 	.word	0x20000038
 8000630:	2000004c 	.word	0x2000004c
 8000634:	20000064 	.word	0x20000064
 8000638:	2000007c 	.word	0x2000007c
 800063c:	20000094 	.word	0x20000094
 8000640:	200000ac 	.word	0x200000ac
 8000644:	200000c8 	.word	0x200000c8
 8000648:	200000e4 	.word	0x200000e4

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f002 fbb4 	bl	8002dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <SystemClock_Config+0xb8>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a22      	ldr	r2, [pc, #136]	; (8000704 <SystemClock_Config+0xb8>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b20      	ldr	r3, [pc, #128]	; (8000704 <SystemClock_Config+0xb8>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <SystemClock_Config+0xbc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000698:	4a1b      	ldr	r2, [pc, #108]	; (8000708 <SystemClock_Config+0xbc>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <SystemClock_Config+0xbc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fe4f 	bl	8001364 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006cc:	f000 f91c 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f8b2 	bl	8001854 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006f6:	f000 f907 	bl	8000908 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000712:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_USART3_UART_Init+0x50>)
 8000714:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART3_UART_Init+0x4c>)
 8000744:	f001 fa66 	bl	8001c14 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800074e:	f000 f8db 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000128 	.word	0x20000128
 800075c:	40004800 	.word	0x40004800

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <MX_GPIO_Init+0xd8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a2e      	ldr	r2, [pc, #184]	; (8000838 <MX_GPIO_Init+0xd8>)
 8000780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <MX_GPIO_Init+0xd8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b28      	ldr	r3, [pc, #160]	; (8000838 <MX_GPIO_Init+0xd8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a27      	ldr	r2, [pc, #156]	; (8000838 <MX_GPIO_Init+0xd8>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b25      	ldr	r3, [pc, #148]	; (8000838 <MX_GPIO_Init+0xd8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007ae:	2200      	movs	r2, #0
 80007b0:	21ff      	movs	r1, #255	; 0xff
 80007b2:	4822      	ldr	r0, [pc, #136]	; (800083c <MX_GPIO_Init+0xdc>)
 80007b4:	f000 fd98 	bl	80012e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80007b8:	230f      	movs	r3, #15
 80007ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4619      	mov	r1, r3
 80007cc:	481c      	ldr	r0, [pc, #112]	; (8000840 <MX_GPIO_Init+0xe0>)
 80007ce:	f000 fbdf 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007d2:	23ff      	movs	r3, #255	; 0xff
 80007d4:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007da:	2301      	movs	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007de:	2302      	movs	r3, #2
 80007e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	4619      	mov	r1, r3
 80007e8:	4814      	ldr	r0, [pc, #80]	; (800083c <MX_GPIO_Init+0xdc>)
 80007ea:	f000 fbd1 	bl	8000f90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2006      	movs	r0, #6
 80007f4:	f000 fb03 	bl	8000dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007f8:	2006      	movs	r0, #6
 80007fa:	f000 fb1c 	bl	8000e36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	2007      	movs	r0, #7
 8000804:	f000 fafb 	bl	8000dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000808:	2007      	movs	r0, #7
 800080a:	f000 fb14 	bl	8000e36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2008      	movs	r0, #8
 8000814:	f000 faf3 	bl	8000dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000818:	2008      	movs	r0, #8
 800081a:	f000 fb0c 	bl	8000e36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	2009      	movs	r0, #9
 8000824:	f000 faeb 	bl	8000dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000828:	2009      	movs	r0, #9
 800082a:	f000 fb04 	bl	8000e36 <HAL_NVIC_EnableIRQ>

}
 800082e:	bf00      	nop
 8000830:	3720      	adds	r7, #32
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40020c00 	.word	0x40020c00
 8000840:	40021800 	.word	0x40021800

08000844 <LED_OnOff>:

/* USER CODE BEGIN 4 */
void LED_OnOff(int led, int interval)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
   HAL_GPIO_WritePin(GPIO_LED, led, GPIO_PIN_SET);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	b29b      	uxth	r3, r3
 8000852:	2201      	movs	r2, #1
 8000854:	4619      	mov	r1, r3
 8000856:	4810      	ldr	r0, [pc, #64]	; (8000898 <LED_OnOff+0x54>)
 8000858:	f000 fd46 	bl	80012e8 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIO_LED_Nucleo, led, GPIO_PIN_SET);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	b29b      	uxth	r3, r3
 8000860:	2201      	movs	r2, #1
 8000862:	4619      	mov	r1, r3
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <LED_OnOff+0x58>)
 8000866:	f000 fd3f 	bl	80012e8 <HAL_GPIO_WritePin>
   HAL_Delay(interval);
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f000 f9c7 	bl	8000c00 <HAL_Delay>
   HAL_GPIO_WritePin(GPIO_LED, led, GPIO_PIN_RESET);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	b29b      	uxth	r3, r3
 8000876:	2200      	movs	r2, #0
 8000878:	4619      	mov	r1, r3
 800087a:	4807      	ldr	r0, [pc, #28]	; (8000898 <LED_OnOff+0x54>)
 800087c:	f000 fd34 	bl	80012e8 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(GPIO_LED_Nucleo, led, GPIO_PIN_RESET);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	b29b      	uxth	r3, r3
 8000884:	2200      	movs	r2, #0
 8000886:	4619      	mov	r1, r3
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <LED_OnOff+0x58>)
 800088a:	f000 fd2d 	bl	80012e8 <HAL_GPIO_WritePin>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40020c00 	.word	0x40020c00
 800089c:	40020400 	.word	0x40020400

080008a0 <LED_On>:
void LED_On(int led)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	   HAL_GPIO_WritePin(GPIO_LED, led, GPIO_PIN_SET);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	2201      	movs	r2, #1
 80008ae:	4619      	mov	r1, r3
 80008b0:	4806      	ldr	r0, [pc, #24]	; (80008cc <LED_On+0x2c>)
 80008b2:	f000 fd19 	bl	80012e8 <HAL_GPIO_WritePin>
	   HAL_GPIO_WritePin(GPIO_LED_Nucleo, led, GPIO_PIN_SET);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	2201      	movs	r2, #1
 80008bc:	4619      	mov	r1, r3
 80008be:	4804      	ldr	r0, [pc, #16]	; (80008d0 <LED_On+0x30>)
 80008c0:	f000 fd12 	bl	80012e8 <HAL_GPIO_WritePin>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40020c00 	.word	0x40020c00
 80008d0:	40020400 	.word	0x40020400

080008d4 <LED_Off>:
void LED_Off(int led)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_LED, led, GPIO_PIN_RESET);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	2200      	movs	r2, #0
 80008e2:	4619      	mov	r1, r3
 80008e4:	4806      	ldr	r0, [pc, #24]	; (8000900 <LED_Off+0x2c>)
 80008e6:	f000 fcff 	bl	80012e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_LED_Nucleo, led, GPIO_PIN_RESET);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	2200      	movs	r2, #0
 80008f0:	4619      	mov	r1, r3
 80008f2:	4804      	ldr	r0, [pc, #16]	; (8000904 <LED_Off+0x30>)
 80008f4:	f000 fcf8 	bl	80012e8 <HAL_GPIO_WritePin>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40020c00 	.word	0x40020c00
 8000904:	40020400 	.word	0x40020400

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	e7fe      	b.n	8000910 <Error_Handler+0x8>
	...

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a0f      	ldr	r2, [pc, #60]	; (8000960 <HAL_MspInit+0x4c>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_MspInit+0x4c>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a1d      	ldr	r2, [pc, #116]	; (80009f8 <HAL_UART_MspInit+0x94>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d134      	bne.n	80009f0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <HAL_UART_MspInit+0x98>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <HAL_UART_MspInit+0x98>)
 8000990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <HAL_UART_MspInit+0x98>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_UART_MspInit+0x98>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a14      	ldr	r2, [pc, #80]	; (80009fc <HAL_UART_MspInit+0x98>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_UART_MspInit+0x98>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009d0:	2307      	movs	r3, #7
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	4809      	ldr	r0, [pc, #36]	; (8000a00 <HAL_UART_MspInit+0x9c>)
 80009dc:	f000 fad8 	bl	8000f90 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	2027      	movs	r0, #39	; 0x27
 80009e6:	f000 fa0a 	bl	8000dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009ea:	2027      	movs	r0, #39	; 0x27
 80009ec:	f000 fa23 	bl	8000e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009f0:	bf00      	nop
 80009f2:	3728      	adds	r7, #40	; 0x28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40004800 	.word	0x40004800
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020c00 	.word	0x40020c00

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <NMI_Handler+0x4>

08000a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <MemManage_Handler+0x4>

08000a16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a50:	f000 f8b6 	bl	8000bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f000 fc5d 	bl	800131c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	f000 fc56 	bl	800131c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000a78:	2004      	movs	r0, #4
 8000a7a:	f000 fc4f 	bl	800131c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000a86:	2008      	movs	r0, #8
 8000a88:	f000 fc48 	bl	800131c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <USART3_IRQHandler+0x10>)
 8000a96:	f001 fa3f 	bl	8001f18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000128 	.word	0x20000128

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b00 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000acc:	480d      	ldr	r0, [pc, #52]	; (8000b04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ace:	490e      	ldr	r1, [pc, #56]	; (8000b08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ad0:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ae4:	4c0b      	ldr	r4, [pc, #44]	; (8000b14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000af2:	f7ff ffd7 	bl	8000aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af6:	f002 f943 	bl	8002d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afa:	f7ff fcf9 	bl	80004f0 <main>
  bx  lr    
 8000afe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b00:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000b0c:	08002e18 	.word	0x08002e18
  ldr r2, =_sbss
 8000b10:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000b14:	20000170 	.word	0x20000170

08000b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <HAL_Init+0x40>)
 8000b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_Init+0x40>)
 8000b32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <HAL_Init+0x40>)
 8000b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f000 f94f 	bl	8000de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f000 f808 	bl	8000b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b50:	f7ff fee0 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023c00 	.word	0x40023c00

08000b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_InitTick+0x54>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <HAL_InitTick+0x58>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4619      	mov	r1, r3
 8000b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 f967 	bl	8000e52 <HAL_SYSTICK_Config>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e00e      	b.n	8000bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b0f      	cmp	r3, #15
 8000b92:	d80a      	bhi.n	8000baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b94:	2200      	movs	r2, #0
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f000 f92f 	bl	8000dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba0:	4a06      	ldr	r2, [pc, #24]	; (8000bbc <HAL_InitTick+0x5c>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e000      	b.n	8000bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000100 	.word	0x20000100
 8000bb8:	20000108 	.word	0x20000108
 8000bbc:	20000104 	.word	0x20000104

08000bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_IncTick+0x20>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_IncTick+0x24>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <HAL_IncTick+0x24>)
 8000bd2:	6013      	str	r3, [r2, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000108 	.word	0x20000108
 8000be4:	2000016c 	.word	0x2000016c

08000be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return uwTick;
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <HAL_GetTick+0x14>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	2000016c 	.word	0x2000016c

08000c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff ffee 	bl	8000be8 <HAL_GetTick>
 8000c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c18:	d005      	beq.n	8000c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <HAL_Delay+0x44>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c26:	bf00      	nop
 8000c28:	f7ff ffde 	bl	8000be8 <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d8f7      	bhi.n	8000c28 <HAL_Delay+0x28>
  {
  }
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000108 	.word	0x20000108

08000c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c64:	4013      	ands	r3, r2
 8000c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7a:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	60d3      	str	r3, [r2, #12]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	f003 0307 	and.w	r3, r3, #7
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	db0b      	blt.n	8000cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 021f 	and.w	r2, r3, #31
 8000cc4:	4907      	ldr	r1, [pc, #28]	; (8000ce4 <__NVIC_EnableIRQ+0x38>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	095b      	lsrs	r3, r3, #5
 8000ccc:	2001      	movs	r0, #1
 8000cce:	fa00 f202 	lsl.w	r2, r0, r2
 8000cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000e100 	.word	0xe000e100

08000ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	db0a      	blt.n	8000d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	490c      	ldr	r1, [pc, #48]	; (8000d34 <__NVIC_SetPriority+0x4c>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	0112      	lsls	r2, r2, #4
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d10:	e00a      	b.n	8000d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4908      	ldr	r1, [pc, #32]	; (8000d38 <__NVIC_SetPriority+0x50>)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	3b04      	subs	r3, #4
 8000d20:	0112      	lsls	r2, r2, #4
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	440b      	add	r3, r1
 8000d26:	761a      	strb	r2, [r3, #24]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000e100 	.word	0xe000e100
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f1c3 0307 	rsb	r3, r3, #7
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	bf28      	it	cs
 8000d5a:	2304      	movcs	r3, #4
 8000d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3304      	adds	r3, #4
 8000d62:	2b06      	cmp	r3, #6
 8000d64:	d902      	bls.n	8000d6c <NVIC_EncodePriority+0x30>
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3b03      	subs	r3, #3
 8000d6a:	e000      	b.n	8000d6e <NVIC_EncodePriority+0x32>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	401a      	ands	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d84:	f04f 31ff 	mov.w	r1, #4294967295
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	43d9      	mvns	r1, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	4313      	orrs	r3, r2
         );
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3724      	adds	r7, #36	; 0x24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db4:	d301      	bcc.n	8000dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00f      	b.n	8000dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <SysTick_Config+0x40>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc2:	210f      	movs	r1, #15
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f7ff ff8e 	bl	8000ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <SysTick_Config+0x40>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd2:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <SysTick_Config+0x40>)
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	e000e010 	.word	0xe000e010

08000de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ff29 	bl	8000c48 <__NVIC_SetPriorityGrouping>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b086      	sub	sp, #24
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607a      	str	r2, [r7, #4]
 8000e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e10:	f7ff ff3e 	bl	8000c90 <__NVIC_GetPriorityGrouping>
 8000e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	68b9      	ldr	r1, [r7, #8]
 8000e1a:	6978      	ldr	r0, [r7, #20]
 8000e1c:	f7ff ff8e 	bl	8000d3c <NVIC_EncodePriority>
 8000e20:	4602      	mov	r2, r0
 8000e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff5d 	bl	8000ce8 <__NVIC_SetPriority>
}
 8000e2e:	bf00      	nop
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff31 	bl	8000cac <__NVIC_EnableIRQ>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ffa2 	bl	8000da4 <SysTick_Config>
 8000e60:	4603      	mov	r3, r0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff feb6 	bl	8000be8 <HAL_GetTick>
 8000e7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d008      	beq.n	8000e9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e052      	b.n	8000f42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 0216 	bic.w	r2, r2, #22
 8000eaa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	695a      	ldr	r2, [r3, #20]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d103      	bne.n	8000ecc <HAL_DMA_Abort+0x62>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d007      	beq.n	8000edc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 0208 	bic.w	r2, r2, #8
 8000eda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0201 	bic.w	r2, r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eec:	e013      	b.n	8000f16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000eee:	f7ff fe7b 	bl	8000be8 <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2b05      	cmp	r3, #5
 8000efa:	d90c      	bls.n	8000f16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2220      	movs	r2, #32
 8000f00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2203      	movs	r2, #3
 8000f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e015      	b.n	8000f42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1e4      	bne.n	8000eee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f28:	223f      	movs	r2, #63	; 0x3f
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d004      	beq.n	8000f68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2280      	movs	r2, #128	; 0x80
 8000f62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e00c      	b.n	8000f82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2205      	movs	r2, #5
 8000f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 0201 	bic.w	r2, r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	e177      	b.n	800129c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fac:	2201      	movs	r2, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	f040 8166 	bne.w	8001296 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d005      	beq.n	8000fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d130      	bne.n	8001044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001018:	2201      	movs	r2, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	091b      	lsrs	r3, r3, #4
 800102e:	f003 0201 	and.w	r2, r3, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b03      	cmp	r3, #3
 800104e:	d017      	beq.n	8001080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d123      	bne.n	80010d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	08da      	lsrs	r2, r3, #3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3208      	adds	r2, #8
 8001094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	220f      	movs	r2, #15
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	69b9      	ldr	r1, [r7, #24]
 80010d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0203 	and.w	r2, r3, #3
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80c0 	beq.w	8001296 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b66      	ldr	r3, [pc, #408]	; (80012b4 <HAL_GPIO_Init+0x324>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	4a65      	ldr	r2, [pc, #404]	; (80012b4 <HAL_GPIO_Init+0x324>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
 8001126:	4b63      	ldr	r3, [pc, #396]	; (80012b4 <HAL_GPIO_Init+0x324>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001132:	4a61      	ldr	r2, [pc, #388]	; (80012b8 <HAL_GPIO_Init+0x328>)
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3302      	adds	r3, #2
 800113a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	220f      	movs	r2, #15
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a58      	ldr	r2, [pc, #352]	; (80012bc <HAL_GPIO_Init+0x32c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d037      	beq.n	80011ce <HAL_GPIO_Init+0x23e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a57      	ldr	r2, [pc, #348]	; (80012c0 <HAL_GPIO_Init+0x330>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d031      	beq.n	80011ca <HAL_GPIO_Init+0x23a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a56      	ldr	r2, [pc, #344]	; (80012c4 <HAL_GPIO_Init+0x334>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d02b      	beq.n	80011c6 <HAL_GPIO_Init+0x236>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a55      	ldr	r2, [pc, #340]	; (80012c8 <HAL_GPIO_Init+0x338>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d025      	beq.n	80011c2 <HAL_GPIO_Init+0x232>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a54      	ldr	r2, [pc, #336]	; (80012cc <HAL_GPIO_Init+0x33c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d01f      	beq.n	80011be <HAL_GPIO_Init+0x22e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a53      	ldr	r2, [pc, #332]	; (80012d0 <HAL_GPIO_Init+0x340>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d019      	beq.n	80011ba <HAL_GPIO_Init+0x22a>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a52      	ldr	r2, [pc, #328]	; (80012d4 <HAL_GPIO_Init+0x344>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d013      	beq.n	80011b6 <HAL_GPIO_Init+0x226>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a51      	ldr	r2, [pc, #324]	; (80012d8 <HAL_GPIO_Init+0x348>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d00d      	beq.n	80011b2 <HAL_GPIO_Init+0x222>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a50      	ldr	r2, [pc, #320]	; (80012dc <HAL_GPIO_Init+0x34c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d007      	beq.n	80011ae <HAL_GPIO_Init+0x21e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4f      	ldr	r2, [pc, #316]	; (80012e0 <HAL_GPIO_Init+0x350>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d101      	bne.n	80011aa <HAL_GPIO_Init+0x21a>
 80011a6:	2309      	movs	r3, #9
 80011a8:	e012      	b.n	80011d0 <HAL_GPIO_Init+0x240>
 80011aa:	230a      	movs	r3, #10
 80011ac:	e010      	b.n	80011d0 <HAL_GPIO_Init+0x240>
 80011ae:	2308      	movs	r3, #8
 80011b0:	e00e      	b.n	80011d0 <HAL_GPIO_Init+0x240>
 80011b2:	2307      	movs	r3, #7
 80011b4:	e00c      	b.n	80011d0 <HAL_GPIO_Init+0x240>
 80011b6:	2306      	movs	r3, #6
 80011b8:	e00a      	b.n	80011d0 <HAL_GPIO_Init+0x240>
 80011ba:	2305      	movs	r3, #5
 80011bc:	e008      	b.n	80011d0 <HAL_GPIO_Init+0x240>
 80011be:	2304      	movs	r3, #4
 80011c0:	e006      	b.n	80011d0 <HAL_GPIO_Init+0x240>
 80011c2:	2303      	movs	r3, #3
 80011c4:	e004      	b.n	80011d0 <HAL_GPIO_Init+0x240>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e002      	b.n	80011d0 <HAL_GPIO_Init+0x240>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <HAL_GPIO_Init+0x240>
 80011ce:	2300      	movs	r3, #0
 80011d0:	69fa      	ldr	r2, [r7, #28]
 80011d2:	f002 0203 	and.w	r2, r2, #3
 80011d6:	0092      	lsls	r2, r2, #2
 80011d8:	4093      	lsls	r3, r2
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e0:	4935      	ldr	r1, [pc, #212]	; (80012b8 <HAL_GPIO_Init+0x328>)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ee:	4b3d      	ldr	r3, [pc, #244]	; (80012e4 <HAL_GPIO_Init+0x354>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001212:	4a34      	ldr	r2, [pc, #208]	; (80012e4 <HAL_GPIO_Init+0x354>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001218:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <HAL_GPIO_Init+0x354>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800123c:	4a29      	ldr	r2, [pc, #164]	; (80012e4 <HAL_GPIO_Init+0x354>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001242:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <HAL_GPIO_Init+0x354>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001266:	4a1f      	ldr	r2, [pc, #124]	; (80012e4 <HAL_GPIO_Init+0x354>)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800126c:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <HAL_GPIO_Init+0x354>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001290:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <HAL_GPIO_Init+0x354>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3301      	adds	r3, #1
 800129a:	61fb      	str	r3, [r7, #28]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	2b0f      	cmp	r3, #15
 80012a0:	f67f ae84 	bls.w	8000fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3724      	adds	r7, #36	; 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40013800 	.word	0x40013800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40020400 	.word	0x40020400
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40021400 	.word	0x40021400
 80012d4:	40021800 	.word	0x40021800
 80012d8:	40021c00 	.word	0x40021c00
 80012dc:	40022000 	.word	0x40022000
 80012e0:	40022400 	.word	0x40022400
 80012e4:	40013c00 	.word	0x40013c00

080012e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
 80012f4:	4613      	mov	r3, r2
 80012f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f8:	787b      	ldrb	r3, [r7, #1]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001304:	e003      	b.n	800130e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001306:	887b      	ldrh	r3, [r7, #2]
 8001308:	041a      	lsls	r2, r3, #16
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	619a      	str	r2, [r3, #24]
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001328:	695a      	ldr	r2, [r3, #20]
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	4013      	ands	r3, r2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d006      	beq.n	8001340 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001332:	4a05      	ldr	r2, [pc, #20]	; (8001348 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f806 	bl	800134c <HAL_GPIO_EXTI_Callback>
  }
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40013c00 	.word	0x40013c00

0800134c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e267      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d075      	beq.n	800146e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001382:	4b88      	ldr	r3, [pc, #544]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b04      	cmp	r3, #4
 800138c:	d00c      	beq.n	80013a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800138e:	4b85      	ldr	r3, [pc, #532]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001396:	2b08      	cmp	r3, #8
 8001398:	d112      	bne.n	80013c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800139a:	4b82      	ldr	r3, [pc, #520]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013a6:	d10b      	bne.n	80013c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a8:	4b7e      	ldr	r3, [pc, #504]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d05b      	beq.n	800146c <HAL_RCC_OscConfig+0x108>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d157      	bne.n	800146c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e242      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c8:	d106      	bne.n	80013d8 <HAL_RCC_OscConfig+0x74>
 80013ca:	4b76      	ldr	r3, [pc, #472]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a75      	ldr	r2, [pc, #468]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	e01d      	b.n	8001414 <HAL_RCC_OscConfig+0xb0>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x98>
 80013e2:	4b70      	ldr	r3, [pc, #448]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a6f      	ldr	r2, [pc, #444]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80013e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b6d      	ldr	r3, [pc, #436]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a6c      	ldr	r2, [pc, #432]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80013f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e00b      	b.n	8001414 <HAL_RCC_OscConfig+0xb0>
 80013fc:	4b69      	ldr	r3, [pc, #420]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a68      	ldr	r2, [pc, #416]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b66      	ldr	r3, [pc, #408]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a65      	ldr	r2, [pc, #404]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 800140e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d013      	beq.n	8001444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fbe4 	bl	8000be8 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fbe0 	bl	8000be8 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	; 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e207      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	4b5b      	ldr	r3, [pc, #364]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0xc0>
 8001442:	e014      	b.n	800146e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fbd0 	bl	8000be8 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fbcc 	bl	8000be8 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e1f3      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145e:	4b51      	ldr	r3, [pc, #324]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0xe8>
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d063      	beq.n	8001542 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800147a:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00b      	beq.n	800149e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001486:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800148e:	2b08      	cmp	r3, #8
 8001490:	d11c      	bne.n	80014cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001492:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d116      	bne.n	80014cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149e:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d005      	beq.n	80014b6 <HAL_RCC_OscConfig+0x152>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d001      	beq.n	80014b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e1c7      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b6:	4b3b      	ldr	r3, [pc, #236]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	4937      	ldr	r1, [pc, #220]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ca:	e03a      	b.n	8001542 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d020      	beq.n	8001516 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d4:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <HAL_RCC_OscConfig+0x244>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014da:	f7ff fb85 	bl	8000be8 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e2:	f7ff fb81 	bl	8000be8 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e1a8      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f4:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f0      	beq.n	80014e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001500:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	4925      	ldr	r1, [pc, #148]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001510:	4313      	orrs	r3, r2
 8001512:	600b      	str	r3, [r1, #0]
 8001514:	e015      	b.n	8001542 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_RCC_OscConfig+0x244>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff fb64 	bl	8000be8 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001524:	f7ff fb60 	bl	8000be8 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e187      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001536:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	2b00      	cmp	r3, #0
 800154c:	d036      	beq.n	80015bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d016      	beq.n	8001584 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_RCC_OscConfig+0x248>)
 8001558:	2201      	movs	r2, #1
 800155a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155c:	f7ff fb44 	bl	8000be8 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001564:	f7ff fb40 	bl	8000be8 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e167      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_RCC_OscConfig+0x240>)
 8001578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0x200>
 8001582:	e01b      	b.n	80015bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_RCC_OscConfig+0x248>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158a:	f7ff fb2d 	bl	8000be8 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001590:	e00e      	b.n	80015b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001592:	f7ff fb29 	bl	8000be8 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d907      	bls.n	80015b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e150      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
 80015a4:	40023800 	.word	0x40023800
 80015a8:	42470000 	.word	0x42470000
 80015ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b0:	4b88      	ldr	r3, [pc, #544]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80015b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1ea      	bne.n	8001592 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 8097 	beq.w	80016f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ce:	4b81      	ldr	r3, [pc, #516]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10f      	bne.n	80015fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	4b7d      	ldr	r3, [pc, #500]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a7c      	ldr	r2, [pc, #496]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ea:	4b7a      	ldr	r3, [pc, #488]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f6:	2301      	movs	r3, #1
 80015f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fa:	4b77      	ldr	r3, [pc, #476]	; (80017d8 <HAL_RCC_OscConfig+0x474>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001602:	2b00      	cmp	r3, #0
 8001604:	d118      	bne.n	8001638 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001606:	4b74      	ldr	r3, [pc, #464]	; (80017d8 <HAL_RCC_OscConfig+0x474>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a73      	ldr	r2, [pc, #460]	; (80017d8 <HAL_RCC_OscConfig+0x474>)
 800160c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001612:	f7ff fae9 	bl	8000be8 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161a:	f7ff fae5 	bl	8000be8 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e10c      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162c:	4b6a      	ldr	r3, [pc, #424]	; (80017d8 <HAL_RCC_OscConfig+0x474>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d106      	bne.n	800164e <HAL_RCC_OscConfig+0x2ea>
 8001640:	4b64      	ldr	r3, [pc, #400]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001644:	4a63      	ldr	r2, [pc, #396]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6713      	str	r3, [r2, #112]	; 0x70
 800164c:	e01c      	b.n	8001688 <HAL_RCC_OscConfig+0x324>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b05      	cmp	r3, #5
 8001654:	d10c      	bne.n	8001670 <HAL_RCC_OscConfig+0x30c>
 8001656:	4b5f      	ldr	r3, [pc, #380]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165a:	4a5e      	ldr	r2, [pc, #376]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	6713      	str	r3, [r2, #112]	; 0x70
 8001662:	4b5c      	ldr	r3, [pc, #368]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001666:	4a5b      	ldr	r2, [pc, #364]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6713      	str	r3, [r2, #112]	; 0x70
 800166e:	e00b      	b.n	8001688 <HAL_RCC_OscConfig+0x324>
 8001670:	4b58      	ldr	r3, [pc, #352]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001674:	4a57      	ldr	r2, [pc, #348]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	6713      	str	r3, [r2, #112]	; 0x70
 800167c:	4b55      	ldr	r3, [pc, #340]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 800167e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001680:	4a54      	ldr	r2, [pc, #336]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001682:	f023 0304 	bic.w	r3, r3, #4
 8001686:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d015      	beq.n	80016bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001690:	f7ff faaa 	bl	8000be8 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001696:	e00a      	b.n	80016ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001698:	f7ff faa6 	bl	8000be8 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e0cb      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ae:	4b49      	ldr	r3, [pc, #292]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0ee      	beq.n	8001698 <HAL_RCC_OscConfig+0x334>
 80016ba:	e014      	b.n	80016e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016bc:	f7ff fa94 	bl	8000be8 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c2:	e00a      	b.n	80016da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c4:	f7ff fa90 	bl	8000be8 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e0b5      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016da:	4b3e      	ldr	r3, [pc, #248]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80016dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1ee      	bne.n	80016c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016e6:	7dfb      	ldrb	r3, [r7, #23]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d105      	bne.n	80016f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ec:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	4a38      	ldr	r2, [pc, #224]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80016f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 80a1 	beq.w	8001844 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001702:	4b34      	ldr	r3, [pc, #208]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b08      	cmp	r3, #8
 800170c:	d05c      	beq.n	80017c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b02      	cmp	r3, #2
 8001714:	d141      	bne.n	800179a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001716:	4b31      	ldr	r3, [pc, #196]	; (80017dc <HAL_RCC_OscConfig+0x478>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff fa64 	bl	8000be8 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001724:	f7ff fa60 	bl	8000be8 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e087      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001736:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69da      	ldr	r2, [r3, #28]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	019b      	lsls	r3, r3, #6
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001758:	085b      	lsrs	r3, r3, #1
 800175a:	3b01      	subs	r3, #1
 800175c:	041b      	lsls	r3, r3, #16
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001764:	061b      	lsls	r3, r3, #24
 8001766:	491b      	ldr	r1, [pc, #108]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 8001768:	4313      	orrs	r3, r2
 800176a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <HAL_RCC_OscConfig+0x478>)
 800176e:	2201      	movs	r2, #1
 8001770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001772:	f7ff fa39 	bl	8000be8 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177a:	f7ff fa35 	bl	8000be8 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e05c      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x416>
 8001798:	e054      	b.n	8001844 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <HAL_RCC_OscConfig+0x478>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7ff fa22 	bl	8000be8 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a8:	f7ff fa1e 	bl	8000be8 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e045      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_RCC_OscConfig+0x470>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x444>
 80017c6:	e03d      	b.n	8001844 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d107      	bne.n	80017e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e038      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40007000 	.word	0x40007000
 80017dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_RCC_OscConfig+0x4ec>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d028      	beq.n	8001840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d121      	bne.n	8001840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d11a      	bne.n	8001840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001810:	4013      	ands	r3, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001816:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001818:	4293      	cmp	r3, r2
 800181a:	d111      	bne.n	8001840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001826:	085b      	lsrs	r3, r3, #1
 8001828:	3b01      	subs	r3, #1
 800182a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800182c:	429a      	cmp	r2, r3
 800182e:	d107      	bne.n	8001840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800

08001854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0cc      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001868:	4b68      	ldr	r3, [pc, #416]	; (8001a0c <HAL_RCC_ClockConfig+0x1b8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 030f 	and.w	r3, r3, #15
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d90c      	bls.n	8001890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	4b65      	ldr	r3, [pc, #404]	; (8001a0c <HAL_RCC_ClockConfig+0x1b8>)
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187e:	4b63      	ldr	r3, [pc, #396]	; (8001a0c <HAL_RCC_ClockConfig+0x1b8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d001      	beq.n	8001890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e0b8      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d020      	beq.n	80018de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a8:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	4a58      	ldr	r2, [pc, #352]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c0:	4b53      	ldr	r3, [pc, #332]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	4a52      	ldr	r2, [pc, #328]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018cc:	4b50      	ldr	r3, [pc, #320]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	494d      	ldr	r1, [pc, #308]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d044      	beq.n	8001974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d107      	bne.n	8001902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	4b47      	ldr	r3, [pc, #284]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d119      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e07f      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d003      	beq.n	8001912 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800190e:	2b03      	cmp	r3, #3
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001912:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e06f      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001922:	4b3b      	ldr	r3, [pc, #236]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e067      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001932:	4b37      	ldr	r3, [pc, #220]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f023 0203 	bic.w	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4934      	ldr	r1, [pc, #208]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 8001940:	4313      	orrs	r3, r2
 8001942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001944:	f7ff f950 	bl	8000be8 <HAL_GetTick>
 8001948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	e00a      	b.n	8001962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194c:	f7ff f94c 	bl	8000be8 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	; 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e04f      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001962:	4b2b      	ldr	r3, [pc, #172]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 020c 	and.w	r2, r3, #12
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	429a      	cmp	r2, r3
 8001972:	d1eb      	bne.n	800194c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001974:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <HAL_RCC_ClockConfig+0x1b8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 030f 	and.w	r3, r3, #15
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d20c      	bcs.n	800199c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b20      	ldr	r3, [pc, #128]	; (8001a0c <HAL_RCC_ClockConfig+0x1b8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e032      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d008      	beq.n	80019ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	4916      	ldr	r1, [pc, #88]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d009      	beq.n	80019da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	490e      	ldr	r1, [pc, #56]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019da:	f000 f821 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 80019de:	4602      	mov	r2, r0
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	091b      	lsrs	r3, r3, #4
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	490a      	ldr	r1, [pc, #40]	; (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 80019ec:	5ccb      	ldrb	r3, [r1, r3]
 80019ee:	fa22 f303 	lsr.w	r3, r2, r3
 80019f2:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff f8b0 	bl	8000b60 <HAL_InitTick>

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023c00 	.word	0x40023c00
 8001a10:	40023800 	.word	0x40023800
 8001a14:	08002df0 	.word	0x08002df0
 8001a18:	20000100 	.word	0x20000100
 8001a1c:	20000104 	.word	0x20000104

08001a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a24:	b090      	sub	sp, #64	; 0x40
 8001a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a30:	2300      	movs	r3, #0
 8001a32:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001a34:	2300      	movs	r3, #0
 8001a36:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a38:	4b59      	ldr	r3, [pc, #356]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d00d      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0x40>
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	f200 80a1 	bhi.w	8001b8c <HAL_RCC_GetSysClockFreq+0x16c>
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x34>
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d003      	beq.n	8001a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a52:	e09b      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a54:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a56:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001a58:	e09b      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a5a:	4b53      	ldr	r3, [pc, #332]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a5e:	e098      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a60:	4b4f      	ldr	r3, [pc, #316]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a68:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a6a:	4b4d      	ldr	r3, [pc, #308]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d028      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a76:	4b4a      	ldr	r3, [pc, #296]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	099b      	lsrs	r3, r3, #6
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	623b      	str	r3, [r7, #32]
 8001a80:	627a      	str	r2, [r7, #36]	; 0x24
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4b47      	ldr	r3, [pc, #284]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a8c:	fb03 f201 	mul.w	r2, r3, r1
 8001a90:	2300      	movs	r3, #0
 8001a92:	fb00 f303 	mul.w	r3, r0, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	4a43      	ldr	r2, [pc, #268]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a9a:	fba0 1202 	umull	r1, r2, r0, r2
 8001a9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001aa0:	460a      	mov	r2, r1
 8001aa2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aa6:	4413      	add	r3, r2
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aac:	2200      	movs	r2, #0
 8001aae:	61bb      	str	r3, [r7, #24]
 8001ab0:	61fa      	str	r2, [r7, #28]
 8001ab2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ab6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001aba:	f7fe fb97 	bl	80001ec <__aeabi_uldivmod>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ac6:	e053      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac8:	4b35      	ldr	r3, [pc, #212]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	099b      	lsrs	r3, r3, #6
 8001ace:	2200      	movs	r2, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	617a      	str	r2, [r7, #20]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ada:	f04f 0b00 	mov.w	fp, #0
 8001ade:	4652      	mov	r2, sl
 8001ae0:	465b      	mov	r3, fp
 8001ae2:	f04f 0000 	mov.w	r0, #0
 8001ae6:	f04f 0100 	mov.w	r1, #0
 8001aea:	0159      	lsls	r1, r3, #5
 8001aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af0:	0150      	lsls	r0, r2, #5
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	ebb2 080a 	subs.w	r8, r2, sl
 8001afa:	eb63 090b 	sbc.w	r9, r3, fp
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b12:	ebb2 0408 	subs.w	r4, r2, r8
 8001b16:	eb63 0509 	sbc.w	r5, r3, r9
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	00eb      	lsls	r3, r5, #3
 8001b24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b28:	00e2      	lsls	r2, r4, #3
 8001b2a:	4614      	mov	r4, r2
 8001b2c:	461d      	mov	r5, r3
 8001b2e:	eb14 030a 	adds.w	r3, r4, sl
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	eb45 030b 	adc.w	r3, r5, fp
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b46:	4629      	mov	r1, r5
 8001b48:	028b      	lsls	r3, r1, #10
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b50:	4621      	mov	r1, r4
 8001b52:	028a      	lsls	r2, r1, #10
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	60fa      	str	r2, [r7, #12]
 8001b60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b64:	f7fe fb42 	bl	80001ec <__aeabi_uldivmod>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	0c1b      	lsrs	r3, r3, #16
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001b80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b8a:	e002      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b8e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3740      	adds	r7, #64	; 0x40
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	00f42400 	.word	0x00f42400
 8001ba8:	017d7840 	.word	0x017d7840

08001bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000100 	.word	0x20000100

08001bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bc8:	f7ff fff0 	bl	8001bac <HAL_RCC_GetHCLKFreq>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	0a9b      	lsrs	r3, r3, #10
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	4903      	ldr	r1, [pc, #12]	; (8001be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bda:	5ccb      	ldrb	r3, [r1, r3]
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40023800 	.word	0x40023800
 8001be8:	08002e00 	.word	0x08002e00

08001bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bf0:	f7ff ffdc 	bl	8001bac <HAL_RCC_GetHCLKFreq>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	0b5b      	lsrs	r3, r3, #13
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	4903      	ldr	r1, [pc, #12]	; (8001c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c02:	5ccb      	ldrb	r3, [r1, r3]
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	08002e00 	.word	0x08002e00

08001c14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e03f      	b.n	8001ca6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d106      	bne.n	8001c40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7fe fe92 	bl	8000964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2224      	movs	r2, #36	; 0x24
 8001c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 fe1d 	bl	8002898 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695a      	ldr	r2, [r3, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2220      	movs	r2, #32
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b08a      	sub	sp, #40	; 0x28
 8001cb2:	af02      	add	r7, sp, #8
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	603b      	str	r3, [r7, #0]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b20      	cmp	r3, #32
 8001ccc:	d17c      	bne.n	8001dc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <HAL_UART_Transmit+0x2c>
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e075      	b.n	8001dca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_UART_Transmit+0x3e>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e06e      	b.n	8001dca <HAL_UART_Transmit+0x11c>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2221      	movs	r2, #33	; 0x21
 8001cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d02:	f7fe ff71 	bl	8000be8 <HAL_GetTick>
 8001d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	88fa      	ldrh	r2, [r7, #6]
 8001d0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	88fa      	ldrh	r2, [r7, #6]
 8001d12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1c:	d108      	bne.n	8001d30 <HAL_UART_Transmit+0x82>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d104      	bne.n	8001d30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	e003      	b.n	8001d38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d40:	e02a      	b.n	8001d98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2180      	movs	r1, #128	; 0x80
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 fb9b 	bl	8002488 <UART_WaitOnFlagUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e036      	b.n	8001dca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10b      	bne.n	8001d7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	3302      	adds	r3, #2
 8001d76:	61bb      	str	r3, [r7, #24]
 8001d78:	e007      	b.n	8001d8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	781a      	ldrb	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	3301      	adds	r3, #1
 8001d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1cf      	bne.n	8001d42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2200      	movs	r2, #0
 8001daa:	2140      	movs	r1, #64	; 0x40
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 fb6b 	bl	8002488 <UART_WaitOnFlagUntilTimeout>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e006      	b.n	8001dca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e000      	b.n	8001dca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001dc8:	2302      	movs	r3, #2
  }
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3720      	adds	r7, #32
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b08a      	sub	sp, #40	; 0x28
 8001dd6:	af02      	add	r7, sp, #8
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	4613      	mov	r3, r2
 8001de0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b20      	cmp	r3, #32
 8001df0:	f040 808c 	bne.w	8001f0c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <HAL_UART_Receive+0x2e>
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e084      	b.n	8001f0e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_UART_Receive+0x40>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e07d      	b.n	8001f0e <HAL_UART_Receive+0x13c>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2222      	movs	r2, #34	; 0x22
 8001e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e2e:	f7fe fedb 	bl	8000be8 <HAL_GetTick>
 8001e32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	88fa      	ldrh	r2, [r7, #6]
 8001e38:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	88fa      	ldrh	r2, [r7, #6]
 8001e3e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e48:	d108      	bne.n	8001e5c <HAL_UART_Receive+0x8a>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d104      	bne.n	8001e5c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	61bb      	str	r3, [r7, #24]
 8001e5a:	e003      	b.n	8001e64 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001e6c:	e043      	b.n	8001ef6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2200      	movs	r2, #0
 8001e76:	2120      	movs	r1, #32
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 fb05 	bl	8002488 <UART_WaitOnFlagUntilTimeout>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e042      	b.n	8001f0e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	61bb      	str	r3, [r7, #24]
 8001ea6:	e01f      	b.n	8001ee8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eb0:	d007      	beq.n	8001ec2 <HAL_UART_Receive+0xf0>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10a      	bne.n	8001ed0 <HAL_UART_Receive+0xfe>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	701a      	strb	r2, [r3, #0]
 8001ece:	e008      	b.n	8001ee2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1b6      	bne.n	8001e6e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2220      	movs	r2, #32
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e000      	b.n	8001f0e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001f0c:	2302      	movs	r3, #2
  }
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3720      	adds	r7, #32
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b0ba      	sub	sp, #232	; 0xe8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001f56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10f      	bne.n	8001f7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d009      	beq.n	8001f7e <HAL_UART_IRQHandler+0x66>
 8001f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 fbd3 	bl	8002722 <UART_Receive_IT>
      return;
 8001f7c:	e256      	b.n	800242c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80de 	beq.w	8002144 <HAL_UART_IRQHandler+0x22c>
 8001f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d106      	bne.n	8001fa2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80d1 	beq.w	8002144 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <HAL_UART_IRQHandler+0xae>
 8001fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f043 0201 	orr.w	r2, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fca:	f003 0304 	and.w	r3, r3, #4
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00b      	beq.n	8001fea <HAL_UART_IRQHandler+0xd2>
 8001fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f043 0202 	orr.w	r2, r3, #2
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <HAL_UART_IRQHandler+0xf6>
 8001ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f043 0204 	orr.w	r2, r3, #4
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800200e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d011      	beq.n	800203e <HAL_UART_IRQHandler+0x126>
 800201a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800201e:	f003 0320 	and.w	r3, r3, #32
 8002022:	2b00      	cmp	r3, #0
 8002024:	d105      	bne.n	8002032 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f043 0208 	orr.w	r2, r3, #8
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 81ed 	beq.w	8002422 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800204c:	f003 0320 	and.w	r3, r3, #32
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_UART_IRQHandler+0x14e>
 8002054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 fb5e 	bl	8002722 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	2b40      	cmp	r3, #64	; 0x40
 8002072:	bf0c      	ite	eq
 8002074:	2301      	moveq	r3, #1
 8002076:	2300      	movne	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d103      	bne.n	8002092 <HAL_UART_IRQHandler+0x17a>
 800208a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d04f      	beq.n	8002132 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 fa66 	bl	8002564 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a2:	2b40      	cmp	r3, #64	; 0x40
 80020a4:	d141      	bne.n	800212a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	3314      	adds	r3, #20
 80020ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020b4:	e853 3f00 	ldrex	r3, [r3]
 80020b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80020bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	3314      	adds	r3, #20
 80020ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80020d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80020d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80020de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80020e2:	e841 2300 	strex	r3, r2, [r1]
 80020e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80020ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1d9      	bne.n	80020a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d013      	beq.n	8002122 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	4a7d      	ldr	r2, [pc, #500]	; (80022f4 <HAL_UART_IRQHandler+0x3dc>)
 8002100:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe ff1f 	bl	8000f4a <HAL_DMA_Abort_IT>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d016      	beq.n	8002140 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800211c:	4610      	mov	r0, r2
 800211e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002120:	e00e      	b.n	8002140 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f99a 	bl	800245c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002128:	e00a      	b.n	8002140 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f996 	bl	800245c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002130:	e006      	b.n	8002140 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f992 	bl	800245c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800213e:	e170      	b.n	8002422 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002140:	bf00      	nop
    return;
 8002142:	e16e      	b.n	8002422 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	2b01      	cmp	r3, #1
 800214a:	f040 814a 	bne.w	80023e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800214e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 8143 	beq.w	80023e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800215c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 813c 	beq.w	80023e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218a:	2b40      	cmp	r3, #64	; 0x40
 800218c:	f040 80b4 	bne.w	80022f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800219c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 8140 	beq.w	8002426 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80021aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80021ae:	429a      	cmp	r2, r3
 80021b0:	f080 8139 	bcs.w	8002426 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80021ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021c6:	f000 8088 	beq.w	80022da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	330c      	adds	r3, #12
 80021d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021d8:	e853 3f00 	ldrex	r3, [r3]
 80021dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80021e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	330c      	adds	r3, #12
 80021f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80021f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80021fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002202:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002206:	e841 2300 	strex	r3, r2, [r1]
 800220a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800220e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1d9      	bne.n	80021ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	3314      	adds	r3, #20
 800221c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800221e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002220:	e853 3f00 	ldrex	r3, [r3]
 8002224:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	3314      	adds	r3, #20
 8002236:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800223a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800223e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002240:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002242:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002246:	e841 2300 	strex	r3, r2, [r1]
 800224a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800224c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1e1      	bne.n	8002216 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	3314      	adds	r3, #20
 8002258:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800225a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800225c:	e853 3f00 	ldrex	r3, [r3]
 8002260:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002268:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3314      	adds	r3, #20
 8002272:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002276:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002278:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800227a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800227c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800227e:	e841 2300 	strex	r3, r2, [r1]
 8002282:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1e3      	bne.n	8002252 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	330c      	adds	r3, #12
 800229e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a2:	e853 3f00 	ldrex	r3, [r3]
 80022a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80022a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022aa:	f023 0310 	bic.w	r3, r3, #16
 80022ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	330c      	adds	r3, #12
 80022b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80022bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80022be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022c4:	e841 2300 	strex	r3, r2, [r1]
 80022c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80022ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1e3      	bne.n	8002298 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe fdc8 	bl	8000e6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	4619      	mov	r1, r3
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f8c0 	bl	8002470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022f0:	e099      	b.n	8002426 <HAL_UART_IRQHandler+0x50e>
 80022f2:	bf00      	nop
 80022f4:	0800262b 	.word	0x0800262b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002300:	b29b      	uxth	r3, r3
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 808b 	beq.w	800242a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002314:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 8086 	beq.w	800242a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	330c      	adds	r3, #12
 8002324:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002328:	e853 3f00 	ldrex	r3, [r3]
 800232c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800232e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002330:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002334:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	330c      	adds	r3, #12
 800233e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002342:	647a      	str	r2, [r7, #68]	; 0x44
 8002344:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002346:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002348:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800234a:	e841 2300 	strex	r3, r2, [r1]
 800234e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1e3      	bne.n	800231e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3314      	adds	r3, #20
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	e853 3f00 	ldrex	r3, [r3]
 8002364:	623b      	str	r3, [r7, #32]
   return(result);
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	f023 0301 	bic.w	r3, r3, #1
 800236c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3314      	adds	r3, #20
 8002376:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800237a:	633a      	str	r2, [r7, #48]	; 0x30
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800237e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002382:	e841 2300 	strex	r3, r2, [r1]
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1e3      	bne.n	8002356 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2220      	movs	r2, #32
 8002392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	330c      	adds	r3, #12
 80023a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	e853 3f00 	ldrex	r3, [r3]
 80023aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f023 0310 	bic.w	r3, r3, #16
 80023b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	330c      	adds	r3, #12
 80023bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80023c0:	61fa      	str	r2, [r7, #28]
 80023c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c4:	69b9      	ldr	r1, [r7, #24]
 80023c6:	69fa      	ldr	r2, [r7, #28]
 80023c8:	e841 2300 	strex	r3, r2, [r1]
 80023cc:	617b      	str	r3, [r7, #20]
   return(result);
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1e3      	bne.n	800239c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80023d8:	4619      	mov	r1, r3
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f848 	bl	8002470 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023e0:	e023      	b.n	800242a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HAL_UART_IRQHandler+0x4ea>
 80023ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f929 	bl	8002652 <UART_Transmit_IT>
    return;
 8002400:	e014      	b.n	800242c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00e      	beq.n	800242c <HAL_UART_IRQHandler+0x514>
 800240e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f969 	bl	80026f2 <UART_EndTransmit_IT>
    return;
 8002420:	e004      	b.n	800242c <HAL_UART_IRQHandler+0x514>
    return;
 8002422:	bf00      	nop
 8002424:	e002      	b.n	800242c <HAL_UART_IRQHandler+0x514>
      return;
 8002426:	bf00      	nop
 8002428:	e000      	b.n	800242c <HAL_UART_IRQHandler+0x514>
      return;
 800242a:	bf00      	nop
  }
}
 800242c:	37e8      	adds	r7, #232	; 0xe8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop

08002434 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b090      	sub	sp, #64	; 0x40
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	4613      	mov	r3, r2
 8002496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002498:	e050      	b.n	800253c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800249a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d04c      	beq.n	800253c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80024a8:	f7fe fb9e 	bl	8000be8 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d241      	bcs.n	800253c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	330c      	adds	r3, #12
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c2:	e853 3f00 	ldrex	r3, [r3]
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	330c      	adds	r3, #12
 80024d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024d8:	637a      	str	r2, [r7, #52]	; 0x34
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024e0:	e841 2300 	strex	r3, r2, [r1]
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1e5      	bne.n	80024b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3314      	adds	r3, #20
 80024f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	e853 3f00 	ldrex	r3, [r3]
 80024fa:	613b      	str	r3, [r7, #16]
   return(result);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	63bb      	str	r3, [r7, #56]	; 0x38
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	3314      	adds	r3, #20
 800250a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800250c:	623a      	str	r2, [r7, #32]
 800250e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002510:	69f9      	ldr	r1, [r7, #28]
 8002512:	6a3a      	ldr	r2, [r7, #32]
 8002514:	e841 2300 	strex	r3, r2, [r1]
 8002518:	61bb      	str	r3, [r7, #24]
   return(result);
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1e5      	bne.n	80024ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e00f      	b.n	800255c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4013      	ands	r3, r2
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	429a      	cmp	r2, r3
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	461a      	mov	r2, r3
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	429a      	cmp	r2, r3
 8002558:	d09f      	beq.n	800249a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3740      	adds	r7, #64	; 0x40
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002564:	b480      	push	{r7}
 8002566:	b095      	sub	sp, #84	; 0x54
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	330c      	adds	r3, #12
 8002572:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002576:	e853 3f00 	ldrex	r3, [r3]
 800257a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800257c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	330c      	adds	r3, #12
 800258a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800258c:	643a      	str	r2, [r7, #64]	; 0x40
 800258e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002590:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002594:	e841 2300 	strex	r3, r2, [r1]
 8002598:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1e5      	bne.n	800256c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3314      	adds	r3, #20
 80025a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	e853 3f00 	ldrex	r3, [r3]
 80025ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	3314      	adds	r3, #20
 80025be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c8:	e841 2300 	strex	r3, r2, [r1]
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1e5      	bne.n	80025a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d119      	bne.n	8002610 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	330c      	adds	r3, #12
 80025e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	e853 3f00 	ldrex	r3, [r3]
 80025ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f023 0310 	bic.w	r3, r3, #16
 80025f2:	647b      	str	r3, [r7, #68]	; 0x44
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	330c      	adds	r3, #12
 80025fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025fc:	61ba      	str	r2, [r7, #24]
 80025fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002600:	6979      	ldr	r1, [r7, #20]
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	e841 2300 	strex	r3, r2, [r1]
 8002608:	613b      	str	r3, [r7, #16]
   return(result);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e5      	bne.n	80025dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800261e:	bf00      	nop
 8002620:	3754      	adds	r7, #84	; 0x54
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002636:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f7ff ff09 	bl	800245c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002652:	b480      	push	{r7}
 8002654:	b085      	sub	sp, #20
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b21      	cmp	r3, #33	; 0x21
 8002664:	d13e      	bne.n	80026e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266e:	d114      	bne.n	800269a <UART_Transmit_IT+0x48>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d110      	bne.n	800269a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800268c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	1c9a      	adds	r2, r3, #2
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	621a      	str	r2, [r3, #32]
 8002698:	e008      	b.n	80026ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	1c59      	adds	r1, r3, #1
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6211      	str	r1, [r2, #32]
 80026a4:	781a      	ldrb	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	4619      	mov	r1, r3
 80026ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10f      	bne.n	80026e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e000      	b.n	80026e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026e4:	2302      	movs	r3, #2
  }
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002708:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff fe8e 	bl	8002434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b08c      	sub	sp, #48	; 0x30
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b22      	cmp	r3, #34	; 0x22
 8002734:	f040 80ab 	bne.w	800288e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002740:	d117      	bne.n	8002772 <UART_Receive_IT+0x50>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d113      	bne.n	8002772 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800274a:	2300      	movs	r3, #0
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	b29b      	uxth	r3, r3
 800275c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002760:	b29a      	uxth	r2, r3
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	1c9a      	adds	r2, r3, #2
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
 8002770:	e026      	b.n	80027c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002778:	2300      	movs	r3, #0
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002784:	d007      	beq.n	8002796 <UART_Receive_IT+0x74>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10a      	bne.n	80027a4 <UART_Receive_IT+0x82>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d106      	bne.n	80027a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a0:	701a      	strb	r2, [r3, #0]
 80027a2:	e008      	b.n	80027b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	4619      	mov	r1, r3
 80027ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d15a      	bne.n	800288a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0220 	bic.w	r2, r2, #32
 80027e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0201 	bic.w	r2, r2, #1
 8002802:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	2b01      	cmp	r3, #1
 8002812:	d135      	bne.n	8002880 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	330c      	adds	r3, #12
 8002820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	e853 3f00 	ldrex	r3, [r3]
 8002828:	613b      	str	r3, [r7, #16]
   return(result);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f023 0310 	bic.w	r3, r3, #16
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	330c      	adds	r3, #12
 8002838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283a:	623a      	str	r2, [r7, #32]
 800283c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283e:	69f9      	ldr	r1, [r7, #28]
 8002840:	6a3a      	ldr	r2, [r7, #32]
 8002842:	e841 2300 	strex	r3, r2, [r1]
 8002846:	61bb      	str	r3, [r7, #24]
   return(result);
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1e5      	bne.n	800281a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b10      	cmp	r3, #16
 800285a:	d10a      	bne.n	8002872 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002876:	4619      	mov	r1, r3
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff fdf9 	bl	8002470 <HAL_UARTEx_RxEventCallback>
 800287e:	e002      	b.n	8002886 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff fde1 	bl	8002448 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e002      	b.n	8002890 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	e000      	b.n	8002890 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800288e:	2302      	movs	r3, #2
  }
}
 8002890:	4618      	mov	r0, r3
 8002892:	3730      	adds	r7, #48	; 0x30
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800289c:	b0c0      	sub	sp, #256	; 0x100
 800289e:	af00      	add	r7, sp, #0
 80028a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b4:	68d9      	ldr	r1, [r3, #12]
 80028b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	ea40 0301 	orr.w	r3, r0, r1
 80028c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028f0:	f021 010c 	bic.w	r1, r1, #12
 80028f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028fe:	430b      	orrs	r3, r1
 8002900:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800290e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002912:	6999      	ldr	r1, [r3, #24]
 8002914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	ea40 0301 	orr.w	r3, r0, r1
 800291e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4b8f      	ldr	r3, [pc, #572]	; (8002b64 <UART_SetConfig+0x2cc>)
 8002928:	429a      	cmp	r2, r3
 800292a:	d005      	beq.n	8002938 <UART_SetConfig+0xa0>
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4b8d      	ldr	r3, [pc, #564]	; (8002b68 <UART_SetConfig+0x2d0>)
 8002934:	429a      	cmp	r2, r3
 8002936:	d104      	bne.n	8002942 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002938:	f7ff f958 	bl	8001bec <HAL_RCC_GetPCLK2Freq>
 800293c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002940:	e003      	b.n	800294a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002942:	f7ff f93f 	bl	8001bc4 <HAL_RCC_GetPCLK1Freq>
 8002946:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800294a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002954:	f040 810c 	bne.w	8002b70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800295c:	2200      	movs	r2, #0
 800295e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002962:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002966:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800296a:	4622      	mov	r2, r4
 800296c:	462b      	mov	r3, r5
 800296e:	1891      	adds	r1, r2, r2
 8002970:	65b9      	str	r1, [r7, #88]	; 0x58
 8002972:	415b      	adcs	r3, r3
 8002974:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002976:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800297a:	4621      	mov	r1, r4
 800297c:	eb12 0801 	adds.w	r8, r2, r1
 8002980:	4629      	mov	r1, r5
 8002982:	eb43 0901 	adc.w	r9, r3, r1
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800299a:	4690      	mov	r8, r2
 800299c:	4699      	mov	r9, r3
 800299e:	4623      	mov	r3, r4
 80029a0:	eb18 0303 	adds.w	r3, r8, r3
 80029a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029a8:	462b      	mov	r3, r5
 80029aa:	eb49 0303 	adc.w	r3, r9, r3
 80029ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80029c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029c6:	460b      	mov	r3, r1
 80029c8:	18db      	adds	r3, r3, r3
 80029ca:	653b      	str	r3, [r7, #80]	; 0x50
 80029cc:	4613      	mov	r3, r2
 80029ce:	eb42 0303 	adc.w	r3, r2, r3
 80029d2:	657b      	str	r3, [r7, #84]	; 0x54
 80029d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80029dc:	f7fd fc06 	bl	80001ec <__aeabi_uldivmod>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4b61      	ldr	r3, [pc, #388]	; (8002b6c <UART_SetConfig+0x2d4>)
 80029e6:	fba3 2302 	umull	r2, r3, r3, r2
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	011c      	lsls	r4, r3, #4
 80029ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029f2:	2200      	movs	r2, #0
 80029f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80029fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a00:	4642      	mov	r2, r8
 8002a02:	464b      	mov	r3, r9
 8002a04:	1891      	adds	r1, r2, r2
 8002a06:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a08:	415b      	adcs	r3, r3
 8002a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a10:	4641      	mov	r1, r8
 8002a12:	eb12 0a01 	adds.w	sl, r2, r1
 8002a16:	4649      	mov	r1, r9
 8002a18:	eb43 0b01 	adc.w	fp, r3, r1
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a30:	4692      	mov	sl, r2
 8002a32:	469b      	mov	fp, r3
 8002a34:	4643      	mov	r3, r8
 8002a36:	eb1a 0303 	adds.w	r3, sl, r3
 8002a3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a3e:	464b      	mov	r3, r9
 8002a40:	eb4b 0303 	adc.w	r3, fp, r3
 8002a44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	18db      	adds	r3, r3, r3
 8002a60:	643b      	str	r3, [r7, #64]	; 0x40
 8002a62:	4613      	mov	r3, r2
 8002a64:	eb42 0303 	adc.w	r3, r2, r3
 8002a68:	647b      	str	r3, [r7, #68]	; 0x44
 8002a6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a72:	f7fd fbbb 	bl	80001ec <__aeabi_uldivmod>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4b3b      	ldr	r3, [pc, #236]	; (8002b6c <UART_SetConfig+0x2d4>)
 8002a7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	2264      	movs	r2, #100	; 0x64
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	1acb      	subs	r3, r1, r3
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a92:	4b36      	ldr	r3, [pc, #216]	; (8002b6c <UART_SetConfig+0x2d4>)
 8002a94:	fba3 2302 	umull	r2, r3, r3, r2
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002aa0:	441c      	add	r4, r3
 8002aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002aac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ab0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ab4:	4642      	mov	r2, r8
 8002ab6:	464b      	mov	r3, r9
 8002ab8:	1891      	adds	r1, r2, r2
 8002aba:	63b9      	str	r1, [r7, #56]	; 0x38
 8002abc:	415b      	adcs	r3, r3
 8002abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ac0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ac4:	4641      	mov	r1, r8
 8002ac6:	1851      	adds	r1, r2, r1
 8002ac8:	6339      	str	r1, [r7, #48]	; 0x30
 8002aca:	4649      	mov	r1, r9
 8002acc:	414b      	adcs	r3, r1
 8002ace:	637b      	str	r3, [r7, #52]	; 0x34
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002adc:	4659      	mov	r1, fp
 8002ade:	00cb      	lsls	r3, r1, #3
 8002ae0:	4651      	mov	r1, sl
 8002ae2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ae6:	4651      	mov	r1, sl
 8002ae8:	00ca      	lsls	r2, r1, #3
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	4603      	mov	r3, r0
 8002af0:	4642      	mov	r2, r8
 8002af2:	189b      	adds	r3, r3, r2
 8002af4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002af8:	464b      	mov	r3, r9
 8002afa:	460a      	mov	r2, r1
 8002afc:	eb42 0303 	adc.w	r3, r2, r3
 8002b00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b18:	460b      	mov	r3, r1
 8002b1a:	18db      	adds	r3, r3, r3
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b1e:	4613      	mov	r3, r2
 8002b20:	eb42 0303 	adc.w	r3, r2, r3
 8002b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b2e:	f7fd fb5d 	bl	80001ec <__aeabi_uldivmod>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <UART_SetConfig+0x2d4>)
 8002b38:	fba3 1302 	umull	r1, r3, r3, r2
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	2164      	movs	r1, #100	; 0x64
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	3332      	adds	r3, #50	; 0x32
 8002b4a:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <UART_SetConfig+0x2d4>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	f003 0207 	and.w	r2, r3, #7
 8002b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4422      	add	r2, r4
 8002b5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b60:	e105      	b.n	8002d6e <UART_SetConfig+0x4d6>
 8002b62:	bf00      	nop
 8002b64:	40011000 	.word	0x40011000
 8002b68:	40011400 	.word	0x40011400
 8002b6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b82:	4642      	mov	r2, r8
 8002b84:	464b      	mov	r3, r9
 8002b86:	1891      	adds	r1, r2, r2
 8002b88:	6239      	str	r1, [r7, #32]
 8002b8a:	415b      	adcs	r3, r3
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b92:	4641      	mov	r1, r8
 8002b94:	1854      	adds	r4, r2, r1
 8002b96:	4649      	mov	r1, r9
 8002b98:	eb43 0501 	adc.w	r5, r3, r1
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	00eb      	lsls	r3, r5, #3
 8002ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002baa:	00e2      	lsls	r2, r4, #3
 8002bac:	4614      	mov	r4, r2
 8002bae:	461d      	mov	r5, r3
 8002bb0:	4643      	mov	r3, r8
 8002bb2:	18e3      	adds	r3, r4, r3
 8002bb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bb8:	464b      	mov	r3, r9
 8002bba:	eb45 0303 	adc.w	r3, r5, r3
 8002bbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bde:	4629      	mov	r1, r5
 8002be0:	008b      	lsls	r3, r1, #2
 8002be2:	4621      	mov	r1, r4
 8002be4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002be8:	4621      	mov	r1, r4
 8002bea:	008a      	lsls	r2, r1, #2
 8002bec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002bf0:	f7fd fafc 	bl	80001ec <__aeabi_uldivmod>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4b60      	ldr	r3, [pc, #384]	; (8002d7c <UART_SetConfig+0x4e4>)
 8002bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	011c      	lsls	r4, r3, #4
 8002c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c06:	2200      	movs	r2, #0
 8002c08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c14:	4642      	mov	r2, r8
 8002c16:	464b      	mov	r3, r9
 8002c18:	1891      	adds	r1, r2, r2
 8002c1a:	61b9      	str	r1, [r7, #24]
 8002c1c:	415b      	adcs	r3, r3
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c24:	4641      	mov	r1, r8
 8002c26:	1851      	adds	r1, r2, r1
 8002c28:	6139      	str	r1, [r7, #16]
 8002c2a:	4649      	mov	r1, r9
 8002c2c:	414b      	adcs	r3, r1
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c3c:	4659      	mov	r1, fp
 8002c3e:	00cb      	lsls	r3, r1, #3
 8002c40:	4651      	mov	r1, sl
 8002c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c46:	4651      	mov	r1, sl
 8002c48:	00ca      	lsls	r2, r1, #3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4642      	mov	r2, r8
 8002c52:	189b      	adds	r3, r3, r2
 8002c54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c58:	464b      	mov	r3, r9
 8002c5a:	460a      	mov	r2, r1
 8002c5c:	eb42 0303 	adc.w	r3, r2, r3
 8002c60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c7c:	4649      	mov	r1, r9
 8002c7e:	008b      	lsls	r3, r1, #2
 8002c80:	4641      	mov	r1, r8
 8002c82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c86:	4641      	mov	r1, r8
 8002c88:	008a      	lsls	r2, r1, #2
 8002c8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c8e:	f7fd faad 	bl	80001ec <__aeabi_uldivmod>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4b39      	ldr	r3, [pc, #228]	; (8002d7c <UART_SetConfig+0x4e4>)
 8002c98:	fba3 1302 	umull	r1, r3, r3, r2
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	2164      	movs	r1, #100	; 0x64
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	3332      	adds	r3, #50	; 0x32
 8002caa:	4a34      	ldr	r2, [pc, #208]	; (8002d7c <UART_SetConfig+0x4e4>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	095b      	lsrs	r3, r3, #5
 8002cb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cb6:	441c      	add	r4, r3
 8002cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	673b      	str	r3, [r7, #112]	; 0x70
 8002cc0:	677a      	str	r2, [r7, #116]	; 0x74
 8002cc2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002cc6:	4642      	mov	r2, r8
 8002cc8:	464b      	mov	r3, r9
 8002cca:	1891      	adds	r1, r2, r2
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	415b      	adcs	r3, r3
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cd6:	4641      	mov	r1, r8
 8002cd8:	1851      	adds	r1, r2, r1
 8002cda:	6039      	str	r1, [r7, #0]
 8002cdc:	4649      	mov	r1, r9
 8002cde:	414b      	adcs	r3, r1
 8002ce0:	607b      	str	r3, [r7, #4]
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cee:	4659      	mov	r1, fp
 8002cf0:	00cb      	lsls	r3, r1, #3
 8002cf2:	4651      	mov	r1, sl
 8002cf4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cf8:	4651      	mov	r1, sl
 8002cfa:	00ca      	lsls	r2, r1, #3
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4603      	mov	r3, r0
 8002d02:	4642      	mov	r2, r8
 8002d04:	189b      	adds	r3, r3, r2
 8002d06:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d08:	464b      	mov	r3, r9
 8002d0a:	460a      	mov	r2, r1
 8002d0c:	eb42 0303 	adc.w	r3, r2, r3
 8002d10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	663b      	str	r3, [r7, #96]	; 0x60
 8002d1c:	667a      	str	r2, [r7, #100]	; 0x64
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d2a:	4649      	mov	r1, r9
 8002d2c:	008b      	lsls	r3, r1, #2
 8002d2e:	4641      	mov	r1, r8
 8002d30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d34:	4641      	mov	r1, r8
 8002d36:	008a      	lsls	r2, r1, #2
 8002d38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d3c:	f7fd fa56 	bl	80001ec <__aeabi_uldivmod>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <UART_SetConfig+0x4e4>)
 8002d46:	fba3 1302 	umull	r1, r3, r3, r2
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	2164      	movs	r1, #100	; 0x64
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	3332      	adds	r3, #50	; 0x32
 8002d58:	4a08      	ldr	r2, [pc, #32]	; (8002d7c <UART_SetConfig+0x4e4>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	f003 020f 	and.w	r2, r3, #15
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4422      	add	r2, r4
 8002d6c:	609a      	str	r2, [r3, #8]
}
 8002d6e:	bf00      	nop
 8002d70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d74:	46bd      	mov	sp, r7
 8002d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d7a:	bf00      	nop
 8002d7c:	51eb851f 	.word	0x51eb851f

08002d80 <__libc_init_array>:
 8002d80:	b570      	push	{r4, r5, r6, lr}
 8002d82:	4d0d      	ldr	r5, [pc, #52]	; (8002db8 <__libc_init_array+0x38>)
 8002d84:	4c0d      	ldr	r4, [pc, #52]	; (8002dbc <__libc_init_array+0x3c>)
 8002d86:	1b64      	subs	r4, r4, r5
 8002d88:	10a4      	asrs	r4, r4, #2
 8002d8a:	2600      	movs	r6, #0
 8002d8c:	42a6      	cmp	r6, r4
 8002d8e:	d109      	bne.n	8002da4 <__libc_init_array+0x24>
 8002d90:	4d0b      	ldr	r5, [pc, #44]	; (8002dc0 <__libc_init_array+0x40>)
 8002d92:	4c0c      	ldr	r4, [pc, #48]	; (8002dc4 <__libc_init_array+0x44>)
 8002d94:	f000 f820 	bl	8002dd8 <_init>
 8002d98:	1b64      	subs	r4, r4, r5
 8002d9a:	10a4      	asrs	r4, r4, #2
 8002d9c:	2600      	movs	r6, #0
 8002d9e:	42a6      	cmp	r6, r4
 8002da0:	d105      	bne.n	8002dae <__libc_init_array+0x2e>
 8002da2:	bd70      	pop	{r4, r5, r6, pc}
 8002da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da8:	4798      	blx	r3
 8002daa:	3601      	adds	r6, #1
 8002dac:	e7ee      	b.n	8002d8c <__libc_init_array+0xc>
 8002dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db2:	4798      	blx	r3
 8002db4:	3601      	adds	r6, #1
 8002db6:	e7f2      	b.n	8002d9e <__libc_init_array+0x1e>
 8002db8:	08002e10 	.word	0x08002e10
 8002dbc:	08002e10 	.word	0x08002e10
 8002dc0:	08002e10 	.word	0x08002e10
 8002dc4:	08002e14 	.word	0x08002e14

08002dc8 <memset>:
 8002dc8:	4402      	add	r2, r0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d100      	bne.n	8002dd2 <memset+0xa>
 8002dd0:	4770      	bx	lr
 8002dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8002dd6:	e7f9      	b.n	8002dcc <memset+0x4>

08002dd8 <_init>:
 8002dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dda:	bf00      	nop
 8002ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dde:	bc08      	pop	{r3}
 8002de0:	469e      	mov	lr, r3
 8002de2:	4770      	bx	lr

08002de4 <_fini>:
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	bf00      	nop
 8002de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dea:	bc08      	pop	{r3}
 8002dec:	469e      	mov	lr, r3
 8002dee:	4770      	bx	lr
